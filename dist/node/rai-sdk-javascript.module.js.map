{"version":3,"file":"rai-sdk-javascript.module.js","mappings":"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","sources":["webpack://@relationalai/rai-sdk-javascript/webpack/bootstrap","webpack://@relationalai/rai-sdk-javascript/webpack/runtime/define property getters","webpack://@relationalai/rai-sdk-javascript/webpack/runtime/hasOwnProperty shorthand","webpack://@relationalai/rai-sdk-javascript/external module \"node-fetch\"","webpack://@relationalai/rai-sdk-javascript/external module \"query-string\"","webpack://@relationalai/rai-sdk-javascript/./src/errors.ts","webpack://@relationalai/rai-sdk-javascript/./src/types.ts","webpack://@relationalai/rai-sdk-javascript/./src/rest.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/base.ts","webpack://@relationalai/rai-sdk-javascript/external module \"apache-arrow\"","webpack://@relationalai/rai-sdk-javascript/external module \"@protobuf-ts/runtime\"","webpack://@relationalai/rai-sdk-javascript/./src/proto/generated/schema.ts","webpack://@relationalai/rai-sdk-javascript/./src/proto/generated/message.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/transaction/types.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/engine/types.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/transaction/transactionUtils.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/transaction/transactionApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/transaction/transactionAsyncApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/model/modelUtils.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/query/queryUtils.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/query/queryApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/user/types.ts","webpack://@relationalai/rai-sdk-javascript/./src/utils.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/client.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/database/databaseApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/edb/edbApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/engine/engineApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/model/modelApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/oauthClient/oauthClientApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/query/execAsyncApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/user/userApi.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/database/types.ts","webpack://@relationalai/rai-sdk-javascript/./src/api/oauthClient/types.ts","webpack://@relationalai/rai-sdk-javascript/./src/credentials.ts","webpack://@relationalai/rai-sdk-javascript/external module \"console-table-printer\"","webpack://@relationalai/rai-sdk-javascript/external module \"decimal.js\"","webpack://@relationalai/rai-sdk-javascript/./src/results/resultUtils.ts","webpack://@relationalai/rai-sdk-javascript/./src/results/resultTable.ts","webpack://@relationalai/rai-sdk-javascript/external module \"config-ini-parser\"","webpack://@relationalai/rai-sdk-javascript/external node-commonjs \"fs\"","webpack://@relationalai/rai-sdk-javascript/external node-commonjs \"os\"","webpack://@relationalai/rai-sdk-javascript/./src/config.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"default\"]: () => __WEBPACK_EXTERNAL_MODULE_node_fetch_e2fb16d6__[\"default\"] });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"stringify\"]: () => __WEBPACK_EXTERNAL_MODULE_query_string_2dcf3be8__.stringify });","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TransactionResult } from './api/transaction/types';\n\nexport class ApiError extends Error {\n  constructor(\n    public message: string,\n    public status = '',\n    public details = '',\n    public response: Response,\n  ) {\n    super(message);\n\n    this.name = 'ApiError';\n  }\n\n  toString() {\n    return `${this.status}: ${this.message}\\n${this.details}`;\n  }\n}\n\nexport class TransactionError extends Error {\n  message: string;\n  result: TransactionResult;\n  response: Response;\n\n  constructor(result: TransactionResult, response: Response) {\n    const msg = 'Transaction error. See transaction result';\n\n    super(msg);\n\n    this.name = 'TransactionError';\n    this.message = msg;\n    this.response = response;\n    this.result = result;\n  }\n\n  toString() {\n    return `${this.message}:\\n ${JSON.stringify(this.result, undefined, 2)}`;\n  }\n}\n\nexport function makeError(body: any, response: Response) {\n  if (body?.type === 'TransactionResult') {\n    return new TransactionError(body, response);\n  }\n\n  return new ApiError(\n    body?.message || response.statusText || response.status,\n    body?.status || response.status,\n    body?.details,\n    response,\n  );\n}\n\nexport type SdkError = ApiError | TransactionError | Error;\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Credentials } from './credentials';\n\nexport const VERSION =\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  typeof __RAI_SDK_VERSION__ === 'undefined'\n    ? 'to-be-replaced'\n    : // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      __RAI_SDK_VERSION__; // replaced at build time\n\nexport type Config = {\n  host: string;\n  port: string;\n  scheme: string;\n  credentials: Credentials;\n};\n\nexport interface AccessTokenCache {\n  access_token: string;\n  expires_in: number;\n  created_on: number;\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport nodeFetch from 'node-fetch';\nimport { stringify } from 'query-string';\n\nimport { makeError } from './errors';\nimport { VERSION } from './types';\n\nconst isNode =\n  typeof process !== 'undefined' &&\n  process.versions != null &&\n  process.versions.node != null;\n\nexport type RequestOptions = {\n  method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  headers?: Record<string, string>;\n  body?: any;\n  query?: Record<string, any>;\n  onResponse?: (r: Response) => void;\n};\n\nfunction addDefaultHeaders(headers: RequestInit['headers'], url: string) {\n  const sdkUserAgent = `rai-sdk-javascript/${VERSION}`;\n  const defaultHeaders: RequestInit['headers'] = {\n    Accept: 'application/json',\n    'Content-type': 'application/json',\n  };\n\n  if (isNode) {\n    // Only in Node because Browsers won't allow to set\n    const parsedUrl = new URL(url);\n\n    defaultHeaders['Host'] = parsedUrl.hostname;\n    defaultHeaders['User-agent'] = sdkUserAgent;\n  }\n\n  return { ...defaultHeaders, ...headers };\n}\n\nexport function makeUrl(scheme: string, host: string, port: string) {\n  scheme = scheme.replace(/[^A-Za-z]/, '');\n\n  return `${scheme}://${host}${port ? ':' + port : ''}`;\n}\n\nexport async function request<T>(url: string, options: RequestOptions = {}) {\n  const opts = {\n    method: options.method || 'GET',\n    body: JSON.stringify(options.body),\n    headers: addDefaultHeaders(options.headers, url),\n  };\n\n  if (typeof window === 'undefined') {\n    // See: https://github.com/node-fetch/node-fetch#custom-highwatermark\n    (opts as any).highWaterMark = 1024 * 1024;\n  }\n\n  const fullUrl =\n    options.query && Object.keys(options.query).length > 0\n      ? `${url}?${stringify(options.query, { arrayFormat: 'none' })}`\n      : url;\n\n  const fetch = globalThis.fetch || nodeFetch;\n\n  let response: Response;\n\n  try {\n    response = await fetch(fullUrl, opts);\n  } catch (error: any) {\n    const errorMsg = error.message.toLowerCase();\n\n    if (\n      errorMsg.includes('failed to fetch') || // Chrome\n      errorMsg.includes('networkerror when attempting to fetch resource') // Firefox\n    ) {\n      throw new Error(\n        'Request failed due to a connectivity issue. Please check your network connection.',\n      );\n    }\n\n    throw error;\n  }\n\n  const contentType = response.headers.get('content-type');\n  let responseBody;\n\n  const responseClone = response.clone();\n\n  try {\n    if (contentType && contentType.includes('application/json')) {\n      responseBody = await response.json();\n    } else if (contentType && contentType.includes('application/x-protobuf')) {\n      responseBody = await response.blob();\n    } else if (contentType?.includes('multipart/form-data') && response.body) {\n      responseBody = await parseMultipart(response);\n    } else {\n      responseBody = await response.text();\n    }\n  } catch (error: any) {\n    const err = new Error('Failed to read server response.');\n    (err as any).cause = error;\n\n    throw err;\n  }\n\n  if (options.onResponse) {\n    try {\n      options.onResponse(responseClone.clone());\n      // eslint-disable-next-line no-empty\n    } catch {}\n  }\n\n  if (response.ok) {\n    return responseBody as T;\n  }\n\n  throw makeError(responseBody, responseClone.clone());\n}\n\nasync function parseMultipart(response: Response) {\n  const formData = await response.formData();\n  const files = [];\n\n  for (const entry of formData) {\n    files.push({\n      name: entry[0],\n      file: entry[1],\n    });\n  }\n\n  return files;\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { makeUrl, request, RequestOptions } from '../rest';\nimport { Config } from '../types';\n\ntype OnResponse = RequestOptions['onResponse'];\n\nexport abstract class Base {\n  baseUrl: string;\n\n  private _onResponse?: OnResponse;\n\n  constructor(public config: Config, public region = 'us-east') {\n    this.baseUrl = makeUrl(config.scheme, config.host, config.port);\n  }\n\n  onResponse(onResponse: OnResponse) {\n    this._onResponse = onResponse;\n  }\n\n  protected async request<T>(\n    path: string,\n    options: Omit<RequestOptions, 'body'> = {},\n  ) {\n    const url = `${this.baseUrl}/${path}`;\n    const token = await this.config.credentials.getToken(url);\n    const opts: RequestOptions = {\n      ...options,\n\n      onResponse: this._onResponse,\n    };\n\n    if (token) {\n      opts.headers = {\n        ...{ authorization: `Bearer ${token}` },\n        ...opts.headers,\n      };\n    }\n\n    return await request<T>(url, opts);\n  }\n\n  protected async get<T>(path: string, query: RequestOptions['query'] = {}) {\n    return this.request<T>(path, { query, method: 'GET' });\n  }\n\n  protected async post<T>(\n    path: string,\n    options: Pick<RequestOptions, 'query' | 'body'>,\n  ) {\n    return this.request<T>(path, { method: 'POST', ...options });\n  }\n\n  protected async put<T>(\n    path: string,\n    options: Pick<RequestOptions, 'query' | 'body'>,\n  ) {\n    return this.request<T>(path, { method: 'PUT', ...options });\n  }\n\n  protected async patch<T>(\n    path: string,\n    options: Pick<RequestOptions, 'query' | 'body'>,\n  ) {\n    return this.request<T>(path, { method: 'PATCH', ...options });\n  }\n\n  protected async delete<T>(\n    path: string,\n    options: Pick<RequestOptions, 'query' | 'body'>,\n  ) {\n    return this.request<T>(path, { ...options, method: 'DELETE' });\n  }\n}\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"tableFromIPC\"]: () => __WEBPACK_EXTERNAL_MODULE_apache_arrow_c15a7582__.tableFromIPC });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"MESSAGE_TYPE\"]: () => __WEBPACK_EXTERNAL_MODULE__protobuf_ts_runtime_2675ee4c__.MESSAGE_TYPE, [\"MessageType\"]: () => __WEBPACK_EXTERNAL_MODULE__protobuf_ts_runtime_2675ee4c__.MessageType, [\"UnknownFieldHandler\"]: () => __WEBPACK_EXTERNAL_MODULE__protobuf_ts_runtime_2675ee4c__.UnknownFieldHandler, [\"WireType\"]: () => __WEBPACK_EXTERNAL_MODULE__protobuf_ts_runtime_2675ee4c__.WireType, [\"reflectionMergePartial\"]: () => __WEBPACK_EXTERNAL_MODULE__protobuf_ts_runtime_2675ee4c__.reflectionMergePartial });","// @generated by protobuf-ts 2.7.0\n// @generated from protobuf file \"schema.proto\" (package \"relationalai.protocol\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * Relations are currently identified by their type signature.\n *\n * @generated from protobuf message relationalai.protocol.RelationId\n */\nexport interface RelationId {\n    /**\n     * @generated from protobuf field: repeated relationalai.protocol.RelType arguments = 1;\n     */\n    arguments: RelType[];\n}\n/**\n * Renamed from Tuple to avoid collision with julia and python `Tuple`.\n * Value types are flattened into their underlying primitive values.\n *\n * @generated from protobuf message relationalai.protocol.RelTuple\n */\nexport interface RelTuple {\n    /**\n     * @generated from protobuf field: repeated relationalai.protocol.PrimitiveValue arguments = 1;\n     */\n    arguments: PrimitiveValue[];\n}\n/**\n * Named this way to avoid collision with julia's Core.{U,}Int128.\n *\n * @generated from protobuf message relationalai.protocol.RelInt128\n */\nexport interface RelInt128 {\n    /**\n     * @generated from protobuf field: uint64 highbits = 1;\n     */\n    highbits: bigint;\n    /**\n     * @generated from protobuf field: uint64 lowbits = 2;\n     */\n    lowbits: bigint;\n}\n/**\n * @generated from protobuf message relationalai.protocol.RelUInt128\n */\nexport interface RelUInt128 {\n    /**\n     * @generated from protobuf field: uint64 highbits = 1;\n     */\n    highbits: bigint;\n    /**\n     * @generated from protobuf field: uint64 lowbits = 2;\n     */\n    lowbits: bigint;\n}\n/**\n * next available: 18\n *\n * @generated from protobuf message relationalai.protocol.PrimitiveValue\n */\nexport interface PrimitiveValue {\n    /**\n     * Type tag indicates which value field is set\n     *\n     * @generated from protobuf field: relationalai.protocol.PrimitiveType tag = 1;\n     */\n    tag: PrimitiveType;\n    /**\n     * @generated from protobuf oneof: value\n     */\n    value: {\n        oneofKind: \"int128Val\";\n        /**\n         * @generated from protobuf field: relationalai.protocol.RelInt128 int128_val = 2;\n         */\n        int128Val: RelInt128; // Not present in protobuf\n    } | {\n        oneofKind: \"int64Val\";\n        /**\n         * @generated from protobuf field: int64 int64_val = 3;\n         */\n        int64Val: bigint;\n    } | {\n        oneofKind: \"int32Val\";\n        /**\n         * @generated from protobuf field: int32 int32_val = 4;\n         */\n        int32Val: number;\n    } | {\n        oneofKind: \"int16Val\";\n        /**\n         * @generated from protobuf field: int32 int16_val = 5;\n         */\n        int16Val: number; // Not present in protobuf; int32\n    } | {\n        oneofKind: \"int8Val\";\n        /**\n         * @generated from protobuf field: int32 int8_val = 6;\n         */\n        int8Val: number; // Not present in protobuf; int32\n    } | {\n        oneofKind: \"uint128Val\";\n        /**\n         * @generated from protobuf field: relationalai.protocol.RelUInt128 uint128_val = 7;\n         */\n        uint128Val: RelUInt128; // Not present in protobuf\n    } | {\n        oneofKind: \"uint64Val\";\n        /**\n         * @generated from protobuf field: uint64 uint64_val = 8;\n         */\n        uint64Val: bigint;\n    } | {\n        oneofKind: \"uint32Val\";\n        /**\n         * @generated from protobuf field: uint32 uint32_val = 9;\n         */\n        uint32Val: number;\n    } | {\n        oneofKind: \"uint16Val\";\n        /**\n         * @generated from protobuf field: uint32 uint16_val = 10;\n         */\n        uint16Val: number; // Not present in protobuf; uint32\n    } | {\n        oneofKind: \"uint8Val\";\n        /**\n         * @generated from protobuf field: uint32 uint8_val = 11;\n         */\n        uint8Val: number; // Not present in protobuf; uint32\n    } | {\n        oneofKind: \"float64Val\";\n        /**\n         * @generated from protobuf field: double float64_val = 12;\n         */\n        float64Val: number;\n    } | {\n        oneofKind: \"float32Val\";\n        /**\n         * @generated from protobuf field: float float32_val = 13;\n         */\n        float32Val: number;\n    } | {\n        oneofKind: \"float16Val\";\n        /**\n         * @generated from protobuf field: float float16_val = 14;\n         */\n        float16Val: number; // Not present in protobuf\n    } | {\n        oneofKind: \"charVal\";\n        /**\n         * @generated from protobuf field: uint32 char_val = 15;\n         */\n        charVal: number;\n    } | {\n        oneofKind: \"boolVal\";\n        /**\n         * @generated from protobuf field: bool bool_val = 16;\n         */\n        boolVal: boolean;\n    } | {\n        oneofKind: \"stringVal\";\n        /**\n         * We use bytes for strings because proto has an encoding\n         * requirement for the proto3::string type.\n         *\n         * @generated from protobuf field: bytes string_val = 17;\n         */\n        stringVal: Uint8Array;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message relationalai.protocol.ValueType\n */\nexport interface ValueType {\n    /**\n     * Constant types are allowed, e.g. the `64` in `decimal[64]`. They serve as type\n     * parameters.\n     *\n     * @generated from protobuf field: repeated relationalai.protocol.RelType argument_types = 1;\n     */\n    argumentTypes: RelType[];\n}\n/**\n * Every value can be used as a type.\n *\n * @generated from protobuf message relationalai.protocol.ConstantType\n */\nexport interface ConstantType {\n    /**\n     * Required\n     * This is the type of the constant and describes whatever is in the RelTuple value\n     *\n     * @generated from protobuf field: relationalai.protocol.RelType rel_type = 1;\n     */\n    relType?: RelType;\n    /**\n     * The tuple contains only the values that are not constant.\n     * E.g. for decimal[64](3.14) only 3.14 is part of the data.\n     * Required\n     *\n     * Tuple because of e.g. specialize on Uniform distribution\n     *\n     * @generated from protobuf field: relationalai.protocol.RelTuple value = 2;\n     */\n    value?: RelTuple;\n}\n/**\n * Union\n *\n * @generated from protobuf message relationalai.protocol.RelType\n */\nexport interface RelType {\n    /**\n     * @generated from protobuf field: relationalai.protocol.Kind tag = 1;\n     */\n    tag: Kind;\n    /**\n     * Only one of the following is allowed.\n     *\n     * @generated from protobuf field: relationalai.protocol.PrimitiveType primitive_type = 2;\n     */\n    primitiveType: PrimitiveType;\n    /**\n     * @generated from protobuf field: relationalai.protocol.ValueType value_type = 3;\n     */\n    valueType?: ValueType;\n    /**\n     * @generated from protobuf field: relationalai.protocol.ConstantType constant_type = 4;\n     */\n    constantType?: ConstantType;\n}\n/**\n * next available: 19\n *\n * @generated from protobuf enum relationalai.protocol.PrimitiveType\n */\nexport enum PrimitiveType {\n    /**\n     * https://developers.google.com/protocol-buffers/docs/style#enums\n     *\n     * @generated from protobuf enum value: UNSPECIFIED_TYPE = 0;\n     */\n    UNSPECIFIED_TYPE = 0,\n    /**\n     * Not present in protobuf, needs two 64-bit ints\n     *\n     * @generated from protobuf enum value: INT_128 = 1;\n     */\n    INT_128 = 1,\n    /**\n     * @generated from protobuf enum value: INT_64 = 2;\n     */\n    INT_64 = 2,\n    /**\n     * @generated from protobuf enum value: INT_32 = 3;\n     */\n    INT_32 = 3,\n    /**\n     * Not present in protobuf\n     *\n     * @generated from protobuf enum value: INT_16 = 4;\n     */\n    INT_16 = 4,\n    /**\n     * Not present in protobuf\n     *\n     * @generated from protobuf enum value: INT_8 = 5;\n     */\n    INT_8 = 5,\n    /**\n     * Not present in protobuf, needs two 64-bit ints\n     *\n     * @generated from protobuf enum value: UINT_128 = 6;\n     */\n    UINT_128 = 6,\n    /**\n     * @generated from protobuf enum value: UINT_64 = 7;\n     */\n    UINT_64 = 7,\n    /**\n     * @generated from protobuf enum value: UINT_32 = 8;\n     */\n    UINT_32 = 8,\n    /**\n     * Not present in protobuf\n     *\n     * @generated from protobuf enum value: UINT_16 = 9;\n     */\n    UINT_16 = 9,\n    /**\n     * Not present in protobuf\n     *\n     * @generated from protobuf enum value: UINT_8 = 10;\n     */\n    UINT_8 = 10,\n    /**\n     * @generated from protobuf enum value: FLOAT_64 = 11;\n     */\n    FLOAT_64 = 11,\n    /**\n     * @generated from protobuf enum value: FLOAT_32 = 12;\n     */\n    FLOAT_32 = 12,\n    /**\n     * Not present in protobuf\n     *\n     * @generated from protobuf enum value: FLOAT_16 = 13;\n     */\n    FLOAT_16 = 13,\n    /**\n     * @generated from protobuf enum value: CHAR = 14;\n     */\n    CHAR = 14,\n    /**\n     * @generated from protobuf enum value: BOOL = 15;\n     */\n    BOOL = 15,\n    /**\n     * these share the string_val field\n     *\n     * In protobuf this is really bytes.\n     *\n     * @generated from protobuf enum value: STRING = 16;\n     */\n    STRING = 16,\n    /**\n     * In protobuf this is really bytes.\n     *\n     * @generated from protobuf enum value: SYMBOL = 17;\n     */\n    SYMBOL = 17,\n    /**\n     * VariableSizeStrings are not supported as PrimitiveValues, though the type can\n     * show up in (internal) type signatures.\n     *\n     * @generated from protobuf enum value: VARIABLE_SIZE_STRING = 18;\n     */\n    VARIABLE_SIZE_STRING = 18\n}\n/**\n * @generated from protobuf enum relationalai.protocol.Kind\n */\nexport enum Kind {\n    /**\n     * https://developers.google.com/protocol-buffers/docs/style#enums\n     *\n     * @generated from protobuf enum value: UNSPECIFIED_KIND = 0;\n     */\n    UNSPECIFIED_KIND = 0,\n    /**\n     * @generated from protobuf enum value: PRIMITIVE_TYPE = 1;\n     */\n    PRIMITIVE_TYPE = 1,\n    /**\n     * @generated from protobuf enum value: VALUE_TYPE = 2;\n     */\n    VALUE_TYPE = 2,\n    /**\n     * @generated from protobuf enum value: CONSTANT_TYPE = 3;\n     */\n    CONSTANT_TYPE = 3\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RelationId$Type extends MessageType<RelationId> {\n    constructor() {\n        super(\"relationalai.protocol.RelationId\", [\n            { no: 1, name: \"arguments\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RelType }\n        ]);\n    }\n    create(value?: PartialMessage<RelationId>): RelationId {\n        const message = { arguments: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RelationId>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelationId): RelationId {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated relationalai.protocol.RelType arguments */ 1:\n                    message.arguments.push(RelType.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RelationId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated relationalai.protocol.RelType arguments = 1; */\n        for (let i = 0; i < message.arguments.length; i++)\n            RelType.internalBinaryWrite(message.arguments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.RelationId\n */\nexport const RelationId = new RelationId$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RelTuple$Type extends MessageType<RelTuple> {\n    constructor() {\n        super(\"relationalai.protocol.RelTuple\", [\n            { no: 1, name: \"arguments\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PrimitiveValue }\n        ]);\n    }\n    create(value?: PartialMessage<RelTuple>): RelTuple {\n        const message = { arguments: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RelTuple>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelTuple): RelTuple {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated relationalai.protocol.PrimitiveValue arguments */ 1:\n                    message.arguments.push(PrimitiveValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RelTuple, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated relationalai.protocol.PrimitiveValue arguments = 1; */\n        for (let i = 0; i < message.arguments.length; i++)\n            PrimitiveValue.internalBinaryWrite(message.arguments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.RelTuple\n */\nexport const RelTuple = new RelTuple$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RelInt128$Type extends MessageType<RelInt128> {\n    constructor() {\n        super(\"relationalai.protocol.RelInt128\", [\n            { no: 1, name: \"highbits\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"lowbits\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RelInt128>): RelInt128 {\n        const message = { highbits: 0n, lowbits: 0n };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RelInt128>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelInt128): RelInt128 {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 highbits */ 1:\n                    message.highbits = reader.uint64().toBigInt();\n                    break;\n                case /* uint64 lowbits */ 2:\n                    message.lowbits = reader.uint64().toBigInt();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RelInt128, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 highbits = 1; */\n        if (message.highbits !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.highbits);\n        /* uint64 lowbits = 2; */\n        if (message.lowbits !== 0n)\n            writer.tag(2, WireType.Varint).uint64(message.lowbits);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.RelInt128\n */\nexport const RelInt128 = new RelInt128$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RelUInt128$Type extends MessageType<RelUInt128> {\n    constructor() {\n        super(\"relationalai.protocol.RelUInt128\", [\n            { no: 1, name: \"highbits\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"lowbits\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RelUInt128>): RelUInt128 {\n        const message = { highbits: 0n, lowbits: 0n };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RelUInt128>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelUInt128): RelUInt128 {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* uint64 highbits */ 1:\n                    message.highbits = reader.uint64().toBigInt();\n                    break;\n                case /* uint64 lowbits */ 2:\n                    message.lowbits = reader.uint64().toBigInt();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RelUInt128, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* uint64 highbits = 1; */\n        if (message.highbits !== 0n)\n            writer.tag(1, WireType.Varint).uint64(message.highbits);\n        /* uint64 lowbits = 2; */\n        if (message.lowbits !== 0n)\n            writer.tag(2, WireType.Varint).uint64(message.lowbits);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.RelUInt128\n */\nexport const RelUInt128 = new RelUInt128$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PrimitiveValue$Type extends MessageType<PrimitiveValue> {\n    constructor() {\n        super(\"relationalai.protocol.PrimitiveValue\", [\n            { no: 1, name: \"tag\", kind: \"enum\", T: () => [\"relationalai.protocol.PrimitiveType\", PrimitiveType] },\n            { no: 2, name: \"int128_val\", kind: \"message\", oneof: \"value\", T: () => RelInt128 },\n            { no: 3, name: \"int64_val\", kind: \"scalar\", oneof: \"value\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"int32_val\", kind: \"scalar\", oneof: \"value\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"int16_val\", kind: \"scalar\", oneof: \"value\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"int8_val\", kind: \"scalar\", oneof: \"value\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"uint128_val\", kind: \"message\", oneof: \"value\", T: () => RelUInt128 },\n            { no: 8, name: \"uint64_val\", kind: \"scalar\", oneof: \"value\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 9, name: \"uint32_val\", kind: \"scalar\", oneof: \"value\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 10, name: \"uint16_val\", kind: \"scalar\", oneof: \"value\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 11, name: \"uint8_val\", kind: \"scalar\", oneof: \"value\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 12, name: \"float64_val\", kind: \"scalar\", oneof: \"value\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"float32_val\", kind: \"scalar\", oneof: \"value\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 14, name: \"float16_val\", kind: \"scalar\", oneof: \"value\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 15, name: \"char_val\", kind: \"scalar\", oneof: \"value\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 16, name: \"bool_val\", kind: \"scalar\", oneof: \"value\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"string_val\", kind: \"scalar\", oneof: \"value\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PrimitiveValue>): PrimitiveValue {\n        const message = { tag: 0, value: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PrimitiveValue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrimitiveValue): PrimitiveValue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* relationalai.protocol.PrimitiveType tag */ 1:\n                    message.tag = reader.int32();\n                    break;\n                case /* relationalai.protocol.RelInt128 int128_val */ 2:\n                    message.value = {\n                        oneofKind: \"int128Val\",\n                        int128Val: RelInt128.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).int128Val)\n                    };\n                    break;\n                case /* int64 int64_val */ 3:\n                    message.value = {\n                        oneofKind: \"int64Val\",\n                        int64Val: reader.int64().toBigInt()\n                    };\n                    break;\n                case /* int32 int32_val */ 4:\n                    message.value = {\n                        oneofKind: \"int32Val\",\n                        int32Val: reader.int32()\n                    };\n                    break;\n                case /* int32 int16_val */ 5:\n                    message.value = {\n                        oneofKind: \"int16Val\",\n                        int16Val: reader.int32()\n                    };\n                    break;\n                case /* int32 int8_val */ 6:\n                    message.value = {\n                        oneofKind: \"int8Val\",\n                        int8Val: reader.int32()\n                    };\n                    break;\n                case /* relationalai.protocol.RelUInt128 uint128_val */ 7:\n                    message.value = {\n                        oneofKind: \"uint128Val\",\n                        uint128Val: RelUInt128.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).uint128Val)\n                    };\n                    break;\n                case /* uint64 uint64_val */ 8:\n                    message.value = {\n                        oneofKind: \"uint64Val\",\n                        uint64Val: reader.uint64().toBigInt()\n                    };\n                    break;\n                case /* uint32 uint32_val */ 9:\n                    message.value = {\n                        oneofKind: \"uint32Val\",\n                        uint32Val: reader.uint32()\n                    };\n                    break;\n                case /* uint32 uint16_val */ 10:\n                    message.value = {\n                        oneofKind: \"uint16Val\",\n                        uint16Val: reader.uint32()\n                    };\n                    break;\n                case /* uint32 uint8_val */ 11:\n                    message.value = {\n                        oneofKind: \"uint8Val\",\n                        uint8Val: reader.uint32()\n                    };\n                    break;\n                case /* double float64_val */ 12:\n                    message.value = {\n                        oneofKind: \"float64Val\",\n                        float64Val: reader.double()\n                    };\n                    break;\n                case /* float float32_val */ 13:\n                    message.value = {\n                        oneofKind: \"float32Val\",\n                        float32Val: reader.float()\n                    };\n                    break;\n                case /* float float16_val */ 14:\n                    message.value = {\n                        oneofKind: \"float16Val\",\n                        float16Val: reader.float()\n                    };\n                    break;\n                case /* uint32 char_val */ 15:\n                    message.value = {\n                        oneofKind: \"charVal\",\n                        charVal: reader.uint32()\n                    };\n                    break;\n                case /* bool bool_val */ 16:\n                    message.value = {\n                        oneofKind: \"boolVal\",\n                        boolVal: reader.bool()\n                    };\n                    break;\n                case /* bytes string_val */ 17:\n                    message.value = {\n                        oneofKind: \"stringVal\",\n                        stringVal: reader.bytes()\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PrimitiveValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* relationalai.protocol.PrimitiveType tag = 1; */\n        if (message.tag !== 0)\n            writer.tag(1, WireType.Varint).int32(message.tag);\n        /* relationalai.protocol.RelInt128 int128_val = 2; */\n        if (message.value.oneofKind === \"int128Val\")\n            RelInt128.internalBinaryWrite(message.value.int128Val, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* int64 int64_val = 3; */\n        if (message.value.oneofKind === \"int64Val\")\n            writer.tag(3, WireType.Varint).int64(message.value.int64Val);\n        /* int32 int32_val = 4; */\n        if (message.value.oneofKind === \"int32Val\")\n            writer.tag(4, WireType.Varint).int32(message.value.int32Val);\n        /* int32 int16_val = 5; */\n        if (message.value.oneofKind === \"int16Val\")\n            writer.tag(5, WireType.Varint).int32(message.value.int16Val);\n        /* int32 int8_val = 6; */\n        if (message.value.oneofKind === \"int8Val\")\n            writer.tag(6, WireType.Varint).int32(message.value.int8Val);\n        /* relationalai.protocol.RelUInt128 uint128_val = 7; */\n        if (message.value.oneofKind === \"uint128Val\")\n            RelUInt128.internalBinaryWrite(message.value.uint128Val, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* uint64 uint64_val = 8; */\n        if (message.value.oneofKind === \"uint64Val\")\n            writer.tag(8, WireType.Varint).uint64(message.value.uint64Val);\n        /* uint32 uint32_val = 9; */\n        if (message.value.oneofKind === \"uint32Val\")\n            writer.tag(9, WireType.Varint).uint32(message.value.uint32Val);\n        /* uint32 uint16_val = 10; */\n        if (message.value.oneofKind === \"uint16Val\")\n            writer.tag(10, WireType.Varint).uint32(message.value.uint16Val);\n        /* uint32 uint8_val = 11; */\n        if (message.value.oneofKind === \"uint8Val\")\n            writer.tag(11, WireType.Varint).uint32(message.value.uint8Val);\n        /* double float64_val = 12; */\n        if (message.value.oneofKind === \"float64Val\")\n            writer.tag(12, WireType.Bit64).double(message.value.float64Val);\n        /* float float32_val = 13; */\n        if (message.value.oneofKind === \"float32Val\")\n            writer.tag(13, WireType.Bit32).float(message.value.float32Val);\n        /* float float16_val = 14; */\n        if (message.value.oneofKind === \"float16Val\")\n            writer.tag(14, WireType.Bit32).float(message.value.float16Val);\n        /* uint32 char_val = 15; */\n        if (message.value.oneofKind === \"charVal\")\n            writer.tag(15, WireType.Varint).uint32(message.value.charVal);\n        /* bool bool_val = 16; */\n        if (message.value.oneofKind === \"boolVal\")\n            writer.tag(16, WireType.Varint).bool(message.value.boolVal);\n        /* bytes string_val = 17; */\n        if (message.value.oneofKind === \"stringVal\")\n            writer.tag(17, WireType.LengthDelimited).bytes(message.value.stringVal);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.PrimitiveValue\n */\nexport const PrimitiveValue = new PrimitiveValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValueType$Type extends MessageType<ValueType> {\n    constructor() {\n        super(\"relationalai.protocol.ValueType\", [\n            { no: 1, name: \"argument_types\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RelType }\n        ]);\n    }\n    create(value?: PartialMessage<ValueType>): ValueType {\n        const message = { argumentTypes: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ValueType>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValueType): ValueType {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated relationalai.protocol.RelType argument_types */ 1:\n                    message.argumentTypes.push(RelType.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ValueType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated relationalai.protocol.RelType argument_types = 1; */\n        for (let i = 0; i < message.argumentTypes.length; i++)\n            RelType.internalBinaryWrite(message.argumentTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.ValueType\n */\nexport const ValueType = new ValueType$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConstantType$Type extends MessageType<ConstantType> {\n    constructor() {\n        super(\"relationalai.protocol.ConstantType\", [\n            { no: 1, name: \"rel_type\", kind: \"message\", T: () => RelType },\n            { no: 2, name: \"value\", kind: \"message\", T: () => RelTuple }\n        ]);\n    }\n    create(value?: PartialMessage<ConstantType>): ConstantType {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ConstantType>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConstantType): ConstantType {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* relationalai.protocol.RelType rel_type */ 1:\n                    message.relType = RelType.internalBinaryRead(reader, reader.uint32(), options, message.relType);\n                    break;\n                case /* relationalai.protocol.RelTuple value */ 2:\n                    message.value = RelTuple.internalBinaryRead(reader, reader.uint32(), options, message.value);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ConstantType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* relationalai.protocol.RelType rel_type = 1; */\n        if (message.relType)\n            RelType.internalBinaryWrite(message.relType, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* relationalai.protocol.RelTuple value = 2; */\n        if (message.value)\n            RelTuple.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.ConstantType\n */\nexport const ConstantType = new ConstantType$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RelType$Type extends MessageType<RelType> {\n    constructor() {\n        super(\"relationalai.protocol.RelType\", [\n            { no: 1, name: \"tag\", kind: \"enum\", T: () => [\"relationalai.protocol.Kind\", Kind] },\n            { no: 2, name: \"primitive_type\", kind: \"enum\", T: () => [\"relationalai.protocol.PrimitiveType\", PrimitiveType] },\n            { no: 3, name: \"value_type\", kind: \"message\", T: () => ValueType },\n            { no: 4, name: \"constant_type\", kind: \"message\", T: () => ConstantType }\n        ]);\n    }\n    create(value?: PartialMessage<RelType>): RelType {\n        const message = { tag: 0, primitiveType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RelType>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelType): RelType {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* relationalai.protocol.Kind tag */ 1:\n                    message.tag = reader.int32();\n                    break;\n                case /* relationalai.protocol.PrimitiveType primitive_type */ 2:\n                    message.primitiveType = reader.int32();\n                    break;\n                case /* relationalai.protocol.ValueType value_type */ 3:\n                    message.valueType = ValueType.internalBinaryRead(reader, reader.uint32(), options, message.valueType);\n                    break;\n                case /* relationalai.protocol.ConstantType constant_type */ 4:\n                    message.constantType = ConstantType.internalBinaryRead(reader, reader.uint32(), options, message.constantType);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RelType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* relationalai.protocol.Kind tag = 1; */\n        if (message.tag !== 0)\n            writer.tag(1, WireType.Varint).int32(message.tag);\n        /* relationalai.protocol.PrimitiveType primitive_type = 2; */\n        if (message.primitiveType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.primitiveType);\n        /* relationalai.protocol.ValueType value_type = 3; */\n        if (message.valueType)\n            ValueType.internalBinaryWrite(message.valueType, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* relationalai.protocol.ConstantType constant_type = 4; */\n        if (message.constantType)\n            ConstantType.internalBinaryWrite(message.constantType, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.RelType\n */\nexport const RelType = new RelType$Type();\n","// @generated by protobuf-ts 2.7.0\n// @generated from protobuf file \"message.proto\" (package \"relationalai.protocol\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RelationId } from \"./schema\";\n/**\n * Describes metadata of a set of relations.\n *\n * @generated from protobuf message relationalai.protocol.MetadataInfo\n */\nexport interface MetadataInfo {\n    /**\n     * @generated from protobuf field: repeated relationalai.protocol.RelationMetadata relations = 1;\n     */\n    relations: RelationMetadata[];\n}\n/**\n * Describes metadata of a single relation.\n *\n * @generated from protobuf message relationalai.protocol.RelationMetadata\n */\nexport interface RelationMetadata {\n    /**\n     * Type signature of this relation.\n     *\n     * @generated from protobuf field: relationalai.protocol.RelationId relation_id = 1;\n     */\n    relationId?: RelationId;\n    /**\n     * Identifier for the corresponding data file.\n     *\n     * @generated from protobuf field: string file_name = 2;\n     */\n    fileName: string;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass MetadataInfo$Type extends MessageType<MetadataInfo> {\n    constructor() {\n        super(\"relationalai.protocol.MetadataInfo\", [\n            { no: 1, name: \"relations\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RelationMetadata }\n        ]);\n    }\n    create(value?: PartialMessage<MetadataInfo>): MetadataInfo {\n        const message = { relations: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MetadataInfo>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataInfo): MetadataInfo {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated relationalai.protocol.RelationMetadata relations */ 1:\n                    message.relations.push(RelationMetadata.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MetadataInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated relationalai.protocol.RelationMetadata relations = 1; */\n        for (let i = 0; i < message.relations.length; i++)\n            RelationMetadata.internalBinaryWrite(message.relations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.MetadataInfo\n */\nexport const MetadataInfo = new MetadataInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RelationMetadata$Type extends MessageType<RelationMetadata> {\n    constructor() {\n        super(\"relationalai.protocol.RelationMetadata\", [\n            { no: 1, name: \"relation_id\", kind: \"message\", T: () => RelationId },\n            { no: 2, name: \"file_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RelationMetadata>): RelationMetadata {\n        const message = { fileName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RelationMetadata>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelationMetadata): RelationMetadata {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* relationalai.protocol.RelationId relation_id */ 1:\n                    message.relationId = RelationId.internalBinaryRead(reader, reader.uint32(), options, message.relationId);\n                    break;\n                case /* string file_name */ 2:\n                    message.fileName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RelationMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* relationalai.protocol.RelationId relation_id = 1; */\n        if (message.relationId)\n            RelationId.internalBinaryWrite(message.relationId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* string file_name = 2; */\n        if (message.fileName !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.fileName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message relationalai.protocol.RelationMetadata\n */\nexport const RelationMetadata = new RelationMetadata$Type();\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Table } from 'apache-arrow';\n\nimport { RelationId } from '../../proto/generated/schema';\n\nexport type RelValue = string | number | boolean | null | number[];\n\nexport type RelKey = {\n  type: 'RelKey';\n  name: string;\n  keys: string[];\n  values: string[];\n};\n\nexport type Relation = {\n  type: 'Relation';\n  rel_key: RelKey;\n  columns: RelValue[][];\n};\n\nexport type Model = {\n  name: string;\n  value: string;\n  type: string;\n  path?: string;\n};\n\nexport type IntegrityConstraintViolation = {\n  type: 'IntegrityConstraintViolation';\n  sources: {\n    rel_key: RelKey;\n    source: string;\n    type: string;\n  }[];\n};\n\nexport type ClientProblem = {\n  type: 'ClientProblem';\n  error_code: string;\n  is_error: boolean;\n  is_exception: boolean;\n  message: string;\n  path: string;\n  report: string;\n};\n\nexport type Problem = IntegrityConstraintViolation | ClientProblem;\n\nexport type LabeledAction = {\n  type: 'LabeledAction';\n  name: string;\n  action:\n    | QueryAction\n    | ModifyWorkspaceAction\n    | InstallAction\n    | ListSourceAction\n    | ListEdbAction;\n};\n\nexport type LabeledActionResult = {\n  type: 'LabeledActionResult';\n  name: string;\n  result:\n    | QueryActionResult\n    | ModifyWorkspaceActionResult\n    | InstallActionResult\n    | ListSourceActionResult\n    | ListEdbActionResult;\n};\n\nexport type QueryAction = {\n  type: 'QueryAction';\n  inputs: Relation[];\n  outputs: string[];\n  persist: string[];\n  source: Model;\n};\n\nexport type QueryActionResult = {\n  type: 'QueryActionResult';\n  output: Relation[];\n};\n\nexport type ModifyWorkspaceAction = {\n  type: 'ModifyWorkspaceAction';\n  delete_edb?: string;\n  delete_source?: string[];\n};\n\nexport type ModifyWorkspaceActionResult = {\n  type: 'ModifyWorkspaceActionResult';\n  delete_edb_result?: RelKey[];\n};\n\nexport type InstallAction = {\n  type: 'InstallAction';\n  sources: Model[];\n};\n\nexport type InstallActionResult = {\n  type: 'InstallActionResult';\n};\n\nexport type ListSourceAction = {\n  type: 'ListSourceAction';\n};\n\nexport type ListSourceActionResult = {\n  type: 'ListSourceActionResult';\n  sources: Model[];\n};\n\nexport type ListEdbAction = {\n  type: 'ListEdbAction';\n};\n\nexport type ListEdbActionResult = {\n  type: 'ListEdbActionResult';\n  rels: RelKey[];\n};\n\nexport enum TransactionMode {\n  OPEN = 'OPEN',\n  CREATE = 'CREATE',\n  CREATE_OVERWRITE = 'CREATE_OVERWRITE',\n  OPEN_OR_CREATE = 'OPEN_OR_CREATE',\n  CLONE = 'CLONE',\n  CLONE_OVERWRITE = 'CLONE_OVERWRITE',\n}\n\nexport type Transaction = {\n  type: 'Transaction';\n  abort: boolean;\n  dbname: string;\n  mode: TransactionMode;\n  nowait_durable: boolean;\n  readonly: boolean;\n  version: number;\n  actions: LabeledAction[];\n  computeName?: string;\n  source_dbname?: string;\n};\n\nexport type TransactionResult = {\n  type: 'TransactionResult';\n  aborted: boolean;\n  debug_level: number;\n  version: number;\n  output: Relation[];\n  problems: Problem[];\n  actions: LabeledActionResult[];\n};\n\nexport enum TransactionAsyncState {\n  CREATED = 'CREATED',\n  RUNNING = 'RUNNING',\n  CANCELLING = 'CANCELLING',\n  ABORTED = 'ABORTED',\n  COMPLETED = 'COMPLETED',\n}\n\nexport type TransactionAsyncPayload = {\n  dbname: string;\n  nowait_durable: boolean;\n  readonly: boolean;\n  engine_name?: string;\n  query: string;\n  v1_inputs: Relation[];\n  tags?: string[];\n};\n\nexport type TransactionAsync = {\n  id: string;\n  account_name: string;\n  engine_name: string;\n  database_name: string;\n  state: TransactionAsyncState;\n  created_by?: string;\n  created_on?: number;\n  finished_at?: number;\n  duration?: number;\n  read_only: boolean;\n  last_requested_interval: string;\n  response_format_version: string;\n  query: string;\n  user_agent: string;\n  abort_reason?: string;\n  tags?: string[];\n};\n\nexport type TransactionAsyncCompact = {\n  id: string;\n  state: TransactionAsyncState;\n};\n\nexport type TransactionAsyncFile = {\n  name: string;\n  // node-fetch parses json to a string\n  file: File | string;\n};\n\nexport type ArrowResult = {\n  relationId: string;\n  filename: string;\n  table: Table;\n};\n\nexport type ArrowRelation = {\n  relationId: string;\n  table: Table;\n  metadata: RelationId;\n};\n\nexport type TransactionAsyncResult = {\n  transaction: TransactionAsyncCompact | TransactionAsync;\n  problems?: Problem[];\n  results: ArrowRelation[];\n};\n\nexport type TransactionListOptions = {\n  database_name?: string | string[];\n  engine_name?: string | string[];\n  state?: TransactionAsyncState | TransactionAsyncState[];\n  tags?: string | string[];\n};\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nexport type Engine = {\n  id: string;\n  name: string;\n  account_name: string;\n  size: string;\n  region: string;\n  state: string;\n  created_by: string;\n  requested_on: string;\n  created_on: string;\n  deleted_on: string;\n};\n\nexport type EngineOptions = {\n  id?: string | string[];\n  name?: string | string[];\n  size?: string | string[];\n  state?: EngineState | EngineState[];\n};\n\nexport enum EngineSize {\n  XS = 'XS',\n  S = 'S',\n  M = 'M',\n  L = 'L',\n  XL = 'XL',\n}\n\nexport enum EngineState {\n  REQUESTED = 'REQUESTED',\n  PROVISIONING = 'PROVISIONING',\n  REGISTERING = 'REGISTERING',\n  PROVISIONED = 'PROVISIONED',\n  PROVISION_FAILED = 'PROVISION_FAILED',\n  DELETE_REQUESTED = 'DELETE_REQUESTED',\n  STOPPING = 'STOPPING',\n  DELETING = 'DELETING',\n  DELETED = 'DELETED',\n  DELETION_FAILED = 'DELETION_FAILED',\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { tableFromIPC } from 'apache-arrow';\n\nimport { MetadataInfo } from '../../proto/generated/message';\nimport { RelationId } from '../../proto/generated/schema';\nimport {\n  ArrowRelation,\n  ArrowResult,\n  LabeledAction,\n  TransactionAsyncFile,\n  TransactionAsyncResult,\n  TransactionAsyncState,\n} from '../transaction/types';\n\nexport function makeLabeledAction(\n  name: string,\n  action: LabeledAction['action'],\n) {\n  const labeledAction: LabeledAction = {\n    type: 'LabeledAction',\n    name: name,\n    action,\n  };\n\n  return labeledAction;\n}\n\nexport async function readTransactionResult(files: TransactionAsyncFile[]) {\n  const transaction = files.find(x => x.name === 'transaction');\n  const problems = files.find(x => x.name === 'problems');\n  const metadataProto = files.find(x => x.name === 'metadata.proto');\n\n  if (!transaction) {\n    throw new Error('transaction part not found');\n  }\n\n  // TODO uncomment and make TransactionAsyncResult.metadata required\n  // if (!metadataProto) {\n  //   throw new Error('metadata proto part not found');\n  // }\n\n  const metadata = metadataProto\n    ? await readProtoMetadata(metadataProto.file as File)\n    : undefined;\n\n  const txn = await readJson(transaction.file);\n  const result: TransactionAsyncResult = {\n    transaction: txn,\n    results: await makeArrowRelations(await readArrowFiles(files), metadata),\n  };\n\n  if (problems) {\n    result.problems = await readJson(problems.file);\n  }\n\n  return result;\n}\n\nexport async function readArrowFiles(files: TransactionAsyncFile[]) {\n  const results: ArrowResult[] = [];\n\n  for (const file of files) {\n    if (\n      typeof file.file !== 'string' &&\n      file.file.type === 'application/vnd.apache.arrow.stream'\n    ) {\n      const table = await tableFromIPC(file.file.stream());\n\n      results.push({\n        relationId: file.name,\n        filename: file.file.name,\n        table,\n      });\n    }\n  }\n\n  return results;\n}\n\nexport async function makeArrowRelations(\n  results: ArrowResult[],\n  metadata?: MetadataInfo,\n) {\n  const metadataMap = (metadata?.relations || []).reduce<\n    Record<string, RelationId | undefined>\n  >((memo, item) => {\n    memo[item.fileName] = item.relationId;\n\n    return memo;\n  }, {});\n\n  return results.map(r => {\n    const metadata: RelationId = metadataMap[r.filename] || { arguments: [] };\n    const relation: ArrowRelation = {\n      relationId: r.relationId,\n      table: r.table,\n      metadata,\n    };\n\n    return relation;\n  });\n}\n\nexport async function readProtoMetadata(file: File | Blob) {\n  if (!file?.arrayBuffer) {\n    throw new Error(`Unsupported metadata type: ${typeof file}`);\n  }\n\n  try {\n    const buffer = await file.arrayBuffer();\n    const data = new Uint8Array(buffer);\n\n    return MetadataInfo.fromBinary(data);\n  } catch (error: any) {\n    // TODO remove it latr\n    // old engines throw this error when there's no output\n    // so we'll just ignore this for some time\n    if (error.message === 'illegal tag: field no 0 wire type 0') {\n      return { relations: [] };\n    }\n\n    throw error;\n  }\n}\n\nasync function readJson(file: File | string) {\n  let str;\n\n  if (typeof file === 'string') {\n    str = file;\n  } else {\n    const data = await file.arrayBuffer();\n\n    str = new TextDecoder().decode(data);\n  }\n\n  return JSON.parse(str);\n}\n\nexport function isTransactionDone(state: TransactionAsyncState) {\n  return (\n    state === TransactionAsyncState.ABORTED ||\n    state === TransactionAsyncState.COMPLETED\n  );\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Base } from '../base';\nimport { makeLabeledAction } from './transactionUtils';\nimport {\n  LabeledAction,\n  Transaction,\n  TransactionMode,\n  TransactionResult,\n} from './types';\n\nconst ENDPOINT = 'transaction';\n\nexport class TransactionApi extends Base {\n  async runTransaction(\n    database: string,\n    engine: string,\n    transaction: Transaction,\n    mode = TransactionMode.OPEN,\n  ) {\n    const query = {\n      dbname: database,\n      compute_name: engine,\n      open_mode: mode,\n      region: this.region,\n    };\n\n    return await this.post<TransactionResult>(ENDPOINT, {\n      query,\n      body: transaction,\n    });\n  }\n\n  async runActions(\n    database: string,\n    engine: string,\n    actions: LabeledAction['action'][],\n    readonly = true,\n  ) {\n    const labeledActions = actions.map((action, i) =>\n      makeLabeledAction(`action-${i}`, action),\n    );\n    const transaction: Transaction = {\n      type: 'Transaction',\n      abort: false,\n      dbname: database,\n      mode: TransactionMode.OPEN,\n      nowait_durable: false,\n      readonly,\n      version: 0,\n      actions: labeledActions,\n      computeName: engine,\n    };\n\n    return await this.runTransaction(database, engine, transaction);\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Base } from '../base';\nimport {\n  readArrowFiles,\n  readProtoMetadata,\n  readTransactionResult,\n} from './transactionUtils';\nimport {\n  Problem,\n  TransactionAsync,\n  TransactionAsyncCompact,\n  TransactionAsyncFile,\n  TransactionAsyncPayload,\n  TransactionListOptions,\n} from './types';\n\nconst ENDPOINT = 'transactions';\n\ntype ListResponse = { transactions: TransactionAsync[] };\ntype SingleResponse = { transaction: TransactionAsync };\ntype CancelResponse = {\n  message?: string;\n};\n\nexport class TransactionAsyncApi extends Base {\n  async runTransactionAsync(transaction: TransactionAsyncPayload) {\n    const result = await this.post<\n      TransactionAsyncCompact | TransactionAsyncFile[]\n    >(ENDPOINT, {\n      body: transaction,\n    });\n\n    if (Array.isArray(result)) {\n      return await readTransactionResult(result);\n    }\n\n    return {\n      transaction: result,\n    };\n  }\n\n  async listTransactions(options?: TransactionListOptions) {\n    const result = await this.get<ListResponse>(ENDPOINT, options);\n\n    return result.transactions;\n  }\n\n  async getTransaction(transactionId: string) {\n    const result = await this.get<SingleResponse>(\n      `${ENDPOINT}/${transactionId}`,\n    );\n\n    return result.transaction;\n  }\n\n  async getTransactionResults(transactionId: string) {\n    const result = await this.get<TransactionAsyncFile[]>(\n      `${ENDPOINT}/${transactionId}/results`,\n    );\n\n    return await readArrowFiles(result);\n  }\n\n  async getTransactionMetadata(transactionId: string) {\n    const result = await this.request<Blob>(\n      `${ENDPOINT}/${transactionId}/metadata`,\n      {\n        method: 'GET',\n        headers: { Accept: 'application/x-protobuf' },\n      },\n    );\n\n    return readProtoMetadata(result);\n  }\n\n  async getTransactionProblems(transactionId: string) {\n    const result = await this.get<Problem[]>(\n      `${ENDPOINT}/${transactionId}/problems`,\n    );\n\n    return result;\n  }\n\n  async cancelTransaction(transactionId: string) {\n    const result = await this.post<CancelResponse>(\n      `${ENDPOINT}/${transactionId}/cancel`,\n      {},\n    );\n\n    return result || {};\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Model } from '../transaction/types';\n\nexport function makeModel(name: string, value: string, path = name) {\n  const model: Model = {\n    type: 'Source',\n    name,\n    value,\n    path,\n  };\n\n  return model;\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { makeModel } from '../model/modelUtils';\nimport { QueryAction, Relation, RelValue } from '../transaction/types';\nimport { QueryInput } from './types';\n\nexport function makeQueryAction(\n  queryString: string,\n  inputs: QueryInput[] = [],\n) {\n  const action: QueryAction = {\n    type: 'QueryAction',\n    outputs: [],\n    persist: [],\n    source: makeModel('query', queryString, ''),\n    inputs: inputs.map(input => makeQueryInput(input.name, input.value)),\n  };\n\n  return action;\n}\n\nexport const makeQueryInput = (name: string, value: RelValue) => {\n  const input: Relation = {\n    rel_key: {\n      values: [],\n      name: name,\n      keys: ['RAI_VariableSizeStrings.VariableSizeString'],\n      type: 'RelKey',\n    },\n    type: 'Relation',\n    columns: [[value]],\n  };\n\n  return input;\n};\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport { TransactionApi } from '../transaction/transactionApi';\nimport { makeQueryAction } from './queryUtils';\nimport { CsvConfigSchema, CsvConfigSyntax, QueryInput } from './types';\n\nexport class QueryApi extends TransactionApi {\n  async query(\n    database: string,\n    engine: string,\n    queryString: string,\n    inputs: QueryInput[] = [],\n    readonly = true,\n  ) {\n    const action = makeQueryAction(queryString, inputs);\n\n    return await this.runActions(database, engine, [action], readonly);\n  }\n\n  async loadJson(\n    database: string,\n    engine: string,\n    relation: string,\n    json: any,\n  ) {\n    const qs = [\n      `def config:data = data`,\n      `def insert:${relation} = load_json[config]`,\n    ];\n    const inputs: QueryInput[] = [\n      {\n        name: 'data',\n        value: JSON.stringify(json),\n      },\n    ];\n\n    return this.query(database, engine, qs.join('\\n'), inputs, false);\n  }\n\n  async loadCsv(\n    database: string,\n    engine: string,\n    relation: string,\n    csv: string,\n    syntax?: CsvConfigSyntax,\n    schema?: CsvConfigSchema,\n  ) {\n    const qs = [`def config:data = data`];\n    const inputs: QueryInput[] = [\n      {\n        name: 'data',\n        value: csv,\n      },\n    ];\n\n    if (syntax) {\n      qs.push(...syntaxToRel(syntax));\n    }\n\n    if (schema) {\n      qs.push(...schemaToRel(schema));\n    }\n\n    qs.push(`def insert:${relation} = load_csv[config]`);\n\n    return this.query(database, engine, qs.join('\\n'), inputs, false);\n  }\n}\n\nfunction toRelLiteral(value: any) {\n  if (typeof value === 'string') {\n    if (value.length === 1) {\n      const escapedValue = value.replace(/'/g, \"\\\\'\");\n\n      return `'${escapedValue}'`;\n    }\n\n    const escapedValue = value.replace(/\"/g, '\\\\\"');\n\n    return `\"${escapedValue}\"`;\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'true' : 'false';\n  }\n}\n\nfunction syntaxToRel(syntax: CsvConfigSyntax) {\n  const qs: string[] = [];\n\n  Object.keys(syntax).forEach(k => {\n    const prop = k as keyof CsvConfigSyntax;\n\n    if (prop === 'header') {\n      const headerStr = Object.keys(syntax.header!)\n        .map(key => {\n          return `(${key}, ${toRelLiteral(syntax.header![key])})`;\n        })\n        .join('; ');\n      qs.push(`def config:syntax:header = ${headerStr}`);\n    } else {\n      qs.push(`def config:syntax:${prop} = ${toRelLiteral(syntax[prop])}`);\n    }\n  });\n\n  return qs;\n}\n\nfunction schemaToRel(schema: CsvConfigSchema) {\n  const qs: string[] = [];\n\n  Object.keys(schema).forEach(colName => {\n    qs.push(`def config:schema${colName} = ${toRelLiteral(schema[colName])}`);\n  });\n\n  return qs;\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nexport type User = {\n  id: string;\n  email: string;\n  roles: UserRole[];\n  id_providers: string[];\n  status: UserStatus;\n};\n\nexport enum UserStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n}\n\nexport enum UserRole {\n  USER = 'user',\n  ADMIN = 'admin',\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\n// See https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\nexport function applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach(baseCtor => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null),\n      );\n    });\n  });\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { applyMixins } from '../utils';\nimport { Base } from './base';\nimport { DatabaseApi } from './database/databaseApi';\nimport { EdbApi } from './edb/edbApi';\nimport { EngineApi } from './engine/engineApi';\nimport { ModelApi } from './model/modelApi';\nimport { OAuthClientApi } from './oauthClient/oauthClientApi';\nimport { ExecAsyncApi } from './query/execAsyncApi';\nimport { QueryApi } from './query/queryApi';\nimport { TransactionApi } from './transaction/transactionApi';\nimport { TransactionAsyncApi } from './transaction/transactionAsyncApi';\nimport { UserApi } from './user/userApi';\n\nclass Client extends Base {}\n\n// eslint-disable-next-line no-redeclare\ninterface Client\n  extends DatabaseApi,\n    EdbApi,\n    EngineApi,\n    ModelApi,\n    OAuthClientApi,\n    ExecAsyncApi,\n    QueryApi,\n    TransactionApi,\n    TransactionAsyncApi,\n    UserApi {}\n\napplyMixins(Client, [\n  DatabaseApi,\n  EdbApi,\n  EngineApi,\n  ModelApi,\n  OAuthClientApi,\n  ExecAsyncApi,\n  QueryApi,\n  TransactionApi,\n  TransactionAsyncApi,\n  UserApi,\n]);\n\nexport default Client;\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Base } from '../base';\nimport { Database, DatabaseOptions } from './types';\n\nconst ENDPOINT = 'database';\n\ntype ListReponse = { databases: Database[] };\ntype SingleReponse = { database: Database };\ntype DeleteResponse = {\n  name: string;\n  message: string;\n};\n\nexport class DatabaseApi extends Base {\n  async createDatabase(name: string, cloneDatabase?: string) {\n    const result = await this.put<SingleReponse>(ENDPOINT, {\n      body: {\n        name,\n        source_name: cloneDatabase,\n      },\n    });\n\n    return result.database;\n  }\n\n  async listDatabases(options?: DatabaseOptions) {\n    const result = await this.get<ListReponse>(ENDPOINT, options);\n\n    return result.databases;\n  }\n\n  async getDatabase(name: string) {\n    const databases = await this.listDatabases({ name });\n\n    return databases[0];\n  }\n\n  async deleteDatabase(name: string) {\n    const result = await this.delete<DeleteResponse>(ENDPOINT, {\n      body: { name },\n    });\n\n    return result;\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TransactionApi } from '../transaction/transactionApi';\nimport { ListEdbAction, ModifyWorkspaceAction } from '../transaction/types';\n\nexport class EdbApi extends TransactionApi {\n  async listEdbs(database: string, engine: string) {\n    const action: ListEdbAction = {\n      type: 'ListEdbAction',\n    };\n    const result = await this.runActions(database, engine, [action]);\n\n    if (result.actions[0]?.result?.type === 'ListEdbActionResult') {\n      return result.actions[0].result.rels;\n    }\n\n    throw new Error('ListEdbActionResult is missing');\n  }\n\n  async deleteEdb(database: string, engine: string, name: string) {\n    const action: ModifyWorkspaceAction = {\n      type: 'ModifyWorkspaceAction',\n      delete_edb: name,\n    };\n    const result = await this.runActions(database, engine, [action], false);\n\n    if (result.actions[0]?.result?.type === 'ModifyWorkspaceActionResult') {\n      return result.actions[0].result.delete_edb_result;\n    }\n\n    throw new Error('ModifyWorkspaceActionResult is missing');\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Base } from '../base';\nimport { Engine, EngineOptions, EngineSize, EngineState } from './types';\n\nconst ENDPOINT = 'compute';\n\ntype ListReponse = { computes: Engine[] };\ntype SingleReponse = { compute: Engine };\ntype DeleteResponse = {\n  status: {\n    name: string;\n    state: EngineState;\n    message: string;\n  };\n};\n\nexport class EngineApi extends Base {\n  async createEngine(name: string, size: EngineSize = EngineSize.XS) {\n    const result = await this.put<SingleReponse>(ENDPOINT, {\n      body: {\n        region: this.region,\n        name,\n        size,\n      },\n    });\n\n    return result.compute;\n  }\n\n  async listEngines(options?: EngineOptions) {\n    const result = await this.get<ListReponse>(ENDPOINT, options);\n\n    return result.computes;\n  }\n\n  async getEngine(name: string) {\n    const engines = await this.listEngines({ name });\n\n    return engines[0];\n  }\n\n  async deleteEngine(name: string) {\n    const result = await this.delete<DeleteResponse>(ENDPOINT, {\n      body: { name },\n    });\n\n    return result.status;\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TransactionApi } from '../transaction/transactionApi';\nimport {\n  InstallAction,\n  ListSourceAction,\n  Model,\n  ModifyWorkspaceAction,\n} from '../transaction/types';\n\nexport class ModelApi extends TransactionApi {\n  async installModels(database: string, engine: string, models: Model[]) {\n    const action: InstallAction = {\n      type: 'InstallAction',\n      sources: models,\n    };\n\n    return await this.runActions(database, engine, [action], false);\n  }\n\n  async listModels(database: string, engine: string) {\n    const action: ListSourceAction = {\n      type: 'ListSourceAction',\n    };\n\n    return await this.runActions(database, engine, [action]);\n  }\n\n  async getModel(database: string, engine: string, name: string) {\n    const result = await this.listModels(database, engine);\n\n    if (result.actions[0]?.result?.type === 'ListSourceActionResult') {\n      const model = result.actions[0].result.sources.find(m => m.name === name);\n\n      if (model) {\n        return model;\n      }\n    }\n\n    throw new Error(`Model '${name}' not found`);\n  }\n\n  async deleteModel(database: string, engine: string, name: string) {\n    const action: ModifyWorkspaceAction = {\n      type: 'ModifyWorkspaceAction',\n      delete_source: [name],\n    };\n    const result = await this.runActions(database, engine, [action], false);\n\n    if (result.actions[0]?.result?.type === 'ModifyWorkspaceActionResult') {\n      return result.actions[0].result;\n    }\n\n    throw new Error('ModifyWorkspaceActionResult is missing');\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Base } from '../base';\nimport {\n  CompactOAuthClient,\n  OAuthClient,\n  Permission,\n  PermissionDescription,\n} from './types';\n\nconst ENDPOINT = 'oauth-clients';\n\ntype ListReponse = { clients: CompactOAuthClient[] };\ntype SingleReponse = { client: OAuthClient };\ntype DeleteResponse = {\n  client_id: string;\n  message: string;\n};\ntype ListPermissionResponse = {\n  permissions: PermissionDescription[];\n};\n\nexport class OAuthClientApi extends Base {\n  async createOAuthClient(name: string, permissions?: Permission[]) {\n    const result = await this.post<SingleReponse>(ENDPOINT, {\n      body: {\n        name,\n        permissions,\n      },\n    });\n\n    return result.client;\n  }\n\n  async listOAuthClients() {\n    const result = await this.get<ListReponse>(ENDPOINT);\n\n    return result.clients;\n  }\n\n  async getOAuthClient(clientId: string) {\n    const result = await this.get<SingleReponse>(`${ENDPOINT}/${clientId}`);\n\n    return result.client;\n  }\n\n  async updateOAuthClient(\n    clientId: string,\n    name?: string,\n    permissions?: Permission[],\n  ) {\n    const body: any = {};\n\n    if (name) {\n      body.name = name;\n    }\n\n    if (permissions) {\n      body.permissions = permissions;\n    }\n\n    const result = await this.patch<SingleReponse>(`${ENDPOINT}/${clientId}`, {\n      body,\n    });\n\n    return result.client;\n  }\n\n  async rotateOAuthClientSecret(clientId: string) {\n    const result = await this.post<SingleReponse>(\n      `${ENDPOINT}/${clientId}/rotate-secret`,\n      {},\n    );\n\n    return result.client;\n  }\n\n  async deleteOAuthClient(clientId: string) {\n    const result = await this.delete<DeleteResponse>(\n      `${ENDPOINT}/${clientId}`,\n      {},\n    );\n\n    return result;\n  }\n\n  async listPermissions() {\n    const result = await this.get<ListPermissionResponse>('permissions', {});\n\n    return result.permissions;\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport { TransactionAsyncApi } from '../transaction/transactionAsyncApi';\nimport {\n  isTransactionDone,\n  makeArrowRelations,\n} from '../transaction/transactionUtils';\nimport {\n  TransactionAsyncCompact,\n  TransactionAsyncPayload,\n  TransactionAsyncResult,\n} from '../transaction/types';\nimport { makeQueryInput } from './queryUtils';\nimport { QueryInput } from './types';\n\nexport class ExecAsyncApi extends TransactionAsyncApi {\n  async execAsync(\n    database: string,\n    engine: string,\n    queryString: string,\n    inputs: QueryInput[] = [],\n    readonly = true,\n    tags: string[] = [],\n  ) {\n    const transaction: TransactionAsyncPayload = {\n      dbname: database,\n      query: queryString,\n      nowait_durable: false,\n      readonly,\n      v1_inputs: inputs.map(input => makeQueryInput(input.name, input.value)),\n      tags,\n    };\n\n    if (engine) {\n      transaction.engine_name = engine;\n    }\n\n    return await this.runTransactionAsync(transaction);\n  }\n\n  async exec(\n    database: string,\n    engine: string,\n    queryString: string,\n    inputs: QueryInput[] = [],\n    readonly = true,\n    tags: string[] = [],\n    interval = 1000, // 1 second\n    timeout = Number.POSITIVE_INFINITY,\n  ) {\n    const result = await this.execAsync(\n      database,\n      engine,\n      queryString,\n      inputs,\n      readonly,\n      tags,\n    );\n    const txnId = result.transaction.id;\n\n    if ('results' in result) {\n      return result;\n    }\n\n    return await this.pollTransaction(txnId, interval, timeout);\n  }\n\n  async pollTransaction(\n    txnId: string,\n    interval = 1000,\n    timeout = Number.POSITIVE_INFINITY,\n  ) {\n    const startedAt = Date.now();\n\n    let transaction: TransactionAsyncCompact;\n\n    await new Promise<void>((resolve, reject) => {\n      const checkState = () => {\n        setTimeout(async () => {\n          transaction = await this.getTransaction(txnId);\n\n          if (isTransactionDone(transaction.state)) {\n            resolve();\n          } else {\n            if (Date.now() - startedAt > timeout) {\n              reject(\n                new Error(\n                  `Polling transaction timeout of ${timeout}ms has been exceeded.`,\n                ),\n              );\n            }\n\n            checkState();\n          }\n        }, interval);\n      };\n\n      checkState();\n    });\n\n    const data = await Promise.all([\n      this.getTransactionMetadata(txnId),\n      this.getTransactionProblems(txnId),\n      this.getTransactionResults(txnId),\n    ]);\n    const results = await makeArrowRelations(data[2], data[0]);\n\n    const res: TransactionAsyncResult = {\n      transaction: transaction!,\n      problems: data[1],\n      results,\n    };\n\n    return res;\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Base } from '../base';\nimport { User, UserRole, UserStatus } from './types';\n\nconst ENDPOINT = 'users';\n\ntype ListReponse = { users: User[] };\ntype SingleReponse = { user: User };\ntype DeleteResponse = {\n  user_id: string;\n  message: string;\n};\n\nexport class UserApi extends Base {\n  async createUser(email: string, roles: UserRole[]) {\n    const result = await this.post<SingleReponse>(ENDPOINT, {\n      body: {\n        email,\n        roles,\n      },\n    });\n\n    return result.user;\n  }\n\n  async listUsers() {\n    const result = await this.get<ListReponse>(ENDPOINT);\n\n    return result.users;\n  }\n\n  async getUser(userId: string) {\n    const result = await this.get<SingleReponse>(`${ENDPOINT}/${userId}`);\n\n    return result.user;\n  }\n\n  async updateUser(userId: string, status?: UserStatus, roles?: UserRole[]) {\n    const body: any = {};\n\n    if (status) {\n      body.status = status;\n    }\n\n    if (roles && roles.length) {\n      body.roles = roles;\n    }\n\n    const result = await this.patch<SingleReponse>(`${ENDPOINT}/${userId}`, {\n      body,\n    });\n\n    return result.user;\n  }\n\n  async enableUser(userId: string) {\n    return await this.updateUser(userId, UserStatus.ACTIVE);\n  }\n\n  async disableUser(userId: string) {\n    return await this.updateUser(userId, UserStatus.INACTIVE);\n  }\n\n  async deleteUser(userId: string) {\n    const result = await this.delete<DeleteResponse>(\n      `${ENDPOINT}/${userId}`,\n      {},\n    );\n\n    return result;\n  }\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nexport type Database = {\n  id: string;\n  name: string;\n  account_name: string;\n  state: DatabaseState;\n  region: string;\n  created_by: string;\n  created_on: string;\n};\n\nexport type DatabaseOptions = {\n  id?: string | string[];\n  name?: string | string[];\n  state?: DatabaseState | DatabaseState[];\n};\n\nexport enum DatabaseState {\n  CREATED = 'CREATED',\n  CREATING = 'CREATING',\n  CREATION_FAILED = 'CREATION_FAILED',\n  DELETED = 'DELETED',\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nexport type OAuthClient = {\n  id: string;\n  name: string;\n  secret: string;\n  created_on: string;\n  created_by: string;\n  permissions: Permission[];\n};\n\nexport type CompactOAuthClient = Pick<\n  OAuthClient,\n  'id' | 'name' | 'created_by' | 'created_on'\n>;\n\nexport enum Permission {\n  // engines\n  CREATE_COMPUTE = 'create:compute',\n  DELETE_COMPUTE = 'delete:compute',\n  LIST_COMPUTES = 'list:compute',\n  READ_COMPUTE = 'read:compute',\n  // databases\n  CREATE_DATABASE = 'create:database',\n  LIST_DATABASES = 'list:database',\n  UPDATE_DATABASE = 'update:database',\n  DELETE_DATABASE = 'delete:database',\n  // transactions\n  RUN_TRANSACTION = 'run:transaction',\n  LIST_TRANSACTION = 'list:transaction',\n  DELETE_TRANSACTION = 'delete:transaction',\n  READ_TRANSACTION = 'read:transaction',\n  // credits\n  READ_CREDITS_USAGE = 'read:credits_usage',\n  // oauth clients\n  CREATE_OAUTH_CLIENT = 'create:oauth_client',\n  READ_OAUTH_CLIENT = 'read:oauth_client',\n  LIST_OAUTH_CLIENTS = 'list:oauth_client',\n  UPDATE_OAUTH_CLIENT = 'update:oauth_client',\n  DELETE_OAUTH_CLIENT = 'delete:oauth_client',\n  ROTATE_OAUTH_CLIENT_SECRET = 'rotate:oauth_client_secret',\n  // users\n  CREATE_USER = 'create:user',\n  LIST_USERS = 'list:user',\n  READ_USER = 'read:user',\n  UPDATE_USER = 'update:user',\n  DELETE_USER = 'delete:user',\n  // roles\n  LIST_ROLES = 'list:role',\n  READ_ROLE = 'read:role',\n  // permissions\n  LIST_PERMISSIONS = 'list:permission',\n  // access keys\n  CREATE_ACCESS_KEY = 'create:accesskey',\n  LIST_ACCESS_KEYS = 'list:accesskey',\n}\n\nexport type PermissionDescription = {\n  name: Permission;\n  description: string;\n};\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { request } from './rest';\nimport { AccessTokenCache } from './types';\n\nexport abstract class Credentials {\n  abstract getToken(url: string): Promise<string>;\n}\n\ntype GetToken = (url: string) => Promise<string>;\n\nexport class GetTokenCredentials extends Credentials {\n  getToken: GetToken;\n\n  constructor(getToken: GetToken) {\n    super();\n\n    this.getToken = getToken;\n  }\n}\n\nclass AccessToken {\n  constructor(\n    public token: string,\n    public experiesIn: number,\n    public createdOn: number,\n  ) {}\n\n  get isExpired() {\n    const delta = Date.now() - this.createdOn;\n\n    // experiesIn stored in seconds\n    return delta / 1000 >= this.experiesIn;\n  }\n}\n\ntype TokenRequest = {\n  client_id: string;\n  client_secret: string;\n  grant_type: string;\n  audience: string;\n};\n\ntype TokenResponse = {\n  access_token: string;\n  expires_in: number;\n};\n\ntype ReadCacheFn = () => Promise<AccessTokenCache | undefined>;\ntype WriteCacheFn = (c: AccessTokenCache) => Promise<void>;\n\nexport class ClientCredentials extends Credentials {\n  clientId: string;\n  clientSecret: string;\n  clientCredentialsUrl: string;\n  accessToken?: AccessToken;\n\n  constructor(\n    clientId: string,\n    clientSecret: string,\n    clientCredentialsUrl: string,\n    private readCache?: ReadCacheFn,\n    private writeCache?: WriteCacheFn,\n  ) {\n    super();\n\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    this.clientCredentialsUrl = clientCredentialsUrl;\n  }\n\n  async getToken(requestedUrl: string) {\n    await this.readTokenFromCache();\n\n    if (this.accessToken && !this.accessToken.isExpired) {\n      return this.accessToken.token;\n    }\n\n    return this.requestToken(requestedUrl);\n  }\n\n  private async readTokenFromCache() {\n    if (!this.accessToken && this.readCache) {\n      const cache = await this.readCache();\n\n      if (cache) {\n        this.accessToken = new AccessToken(\n          cache.access_token,\n          cache.expires_in,\n          cache.created_on,\n        );\n      }\n    }\n  }\n\n  private async requestToken(requestedUrl: string) {\n    const parsedUrl = new URL(requestedUrl);\n    const body: TokenRequest = {\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      grant_type: 'client_credentials',\n      // ensure the audience contains the protocol scheme\n      audience: `https://${parsedUrl.hostname}`,\n    };\n\n    const data = await request<TokenResponse>(this.clientCredentialsUrl, {\n      method: 'POST',\n      body,\n    });\n\n    const token: AccessTokenCache = {\n      access_token: data.access_token,\n      expires_in: data.expires_in,\n      created_on: Date.now(),\n    };\n\n    this.accessToken = new AccessToken(\n      token.access_token,\n      token.expires_in,\n      token.created_on,\n    );\n\n    if (this.writeCache) {\n      await this.writeCache(token);\n    }\n\n    return this.accessToken.token;\n  }\n}\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"Table\"]: () => __WEBPACK_EXTERNAL_MODULE_console_table_printer_00653786__.Table });","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"default\"]: () => __WEBPACK_EXTERNAL_MODULE_decimal_js_e057b0bb__[\"default\"] });","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport Decimal from 'decimal.js';\n\nimport {\n  Kind,\n  PrimitiveType,\n  PrimitiveValue,\n  RelType,\n} from '../proto/generated/schema';\nimport {\n  ConstantValue,\n  RelTypeDef,\n  RelTypedValue,\n  ValueTypeValue,\n} from './types';\n\nDecimal.config({ precision: 31 });\n\n// Rata Die milliseconds for 1970-01-01T00:00:00.\n// Date and DateTime types are represented as days and milliseconds\n// respectively since 1 AD, following ISO 8601, which is the first\n// year in the proleptic Gregorian calendar. JavaScript represents\n// Date types as milliseconds since the UNIX epoch.\nconst UNIXEPOCH = 62135683200000;\nconst MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1000;\nconst intRegEx = /^Int(\\d+)$/;\nconst uintRegEx = /^UInt(\\d+)$/;\nconst floatRegEx = /^Float(\\d+)$/;\nconst decimalRegEx = /^FixedPointDecimals.FixedDecimal{Int(\\d+), (\\d+)}$/;\nconst rationalRegEx = /^Rational{Int(\\d+)}$/;\n\nexport function getTypeDef(type: string): RelTypeDef {\n  if (type.startsWith(':')) {\n    return {\n      type: 'Constant',\n      name: 'Symbol',\n      value: { type: 'String', value: type },\n    };\n  }\n\n  if (type.includes('(') && !type.startsWith('(')) {\n    return {\n      type: 'Constant',\n      name: type,\n      value: { type: 'String', value: type },\n    };\n  }\n\n  if (type === 'String') {\n    return {\n      type: 'String',\n    };\n  }\n\n  if (type === 'Bool') {\n    return {\n      type: 'Bool',\n    };\n  }\n\n  if (type === 'Char') {\n    return {\n      type: 'Char',\n    };\n  }\n\n  if (type === 'Dates.DateTime') {\n    return {\n      type: 'DateTime',\n    };\n  }\n\n  if (type === 'Dates.Date') {\n    return {\n      type: 'Date',\n    };\n  }\n\n  if (type === 'Dates.Year') {\n    return {\n      type: 'Year',\n    };\n  }\n\n  if (type === 'Dates.Month') {\n    return {\n      type: 'Month',\n    };\n  }\n\n  if (type === 'Dates.Week') {\n    return {\n      type: 'Week',\n    };\n  }\n\n  if (type === 'Dates.Day') {\n    return {\n      type: 'Day',\n    };\n  }\n\n  if (type === 'Dates.Hour') {\n    return {\n      type: 'Hour',\n    };\n  }\n\n  if (type === 'Dates.Minute') {\n    return {\n      type: 'Minute',\n    };\n  }\n\n  if (type === 'Dates.Second') {\n    return {\n      type: 'Second',\n    };\n  }\n\n  if (type === 'Dates.Millisecond') {\n    return {\n      type: 'Millisecond',\n    };\n  }\n\n  if (type === 'Dates.Microsecond') {\n    return {\n      type: 'Microsecond',\n    };\n  }\n\n  if (type === 'Dates.Nanosecond') {\n    return {\n      type: 'Nanosecond',\n    };\n  }\n\n  if (type === 'HashValue') {\n    return {\n      type: 'Hash',\n    };\n  }\n\n  if (type === 'Missing') {\n    return {\n      type: 'Missing',\n    };\n  }\n\n  if (type === 'FilePos') {\n    return {\n      type: 'FilePos',\n    };\n  }\n\n  const intMatch = type.match(intRegEx);\n\n  if (intMatch && intMatch.length === 2) {\n    const bits = intMatch[1];\n    const type = `Int${bits}`;\n\n    return {\n      type: type as any,\n    };\n  }\n\n  const uintMatch = type.match(uintRegEx);\n\n  if (uintMatch && uintMatch.length === 2) {\n    const bits = uintMatch[1];\n    return {\n      type: `UInt${bits}` as any,\n    };\n  }\n\n  const floatMatch = type.match(floatRegEx);\n\n  if (floatMatch && floatMatch.length === 2) {\n    const bits = floatMatch[1];\n\n    return {\n      type: `Float${bits}` as any,\n    };\n  }\n\n  const decimalMatch = type.match(decimalRegEx);\n\n  if (decimalMatch && decimalMatch.length === 3) {\n    const bits = Number.parseInt(decimalMatch[1]);\n    const places = Number.parseInt(decimalMatch[2]);\n\n    return {\n      type: `Decimal${bits}` as any,\n      places,\n    };\n  }\n\n  const rationalMatch = type.match(rationalRegEx);\n\n  if (rationalMatch && rationalMatch.length === 2) {\n    const bits = rationalMatch[1];\n\n    return {\n      type: `Rational${bits}` as any,\n    };\n  }\n\n  return {\n    type: 'Unknown',\n    name: type,\n  };\n}\n\nexport function getTypeDefFromProtobuf(type: RelType): RelTypeDef {\n  if (\n    type.tag === Kind.CONSTANT_TYPE &&\n    type.constantType?.value &&\n    type.constantType?.relType\n  ) {\n    const typeDef = getTypeDefFromProtobuf(type.constantType.relType);\n\n    if (typeDef.type !== 'ValueType') {\n      const values = type.constantType.value.arguments.map(mapPrimitiveValue);\n      const value = convertValue(\n        typeDef,\n        values.length === 1 ? values[0] : values,\n      );\n\n      return {\n        type: 'Constant',\n        name:\n          typeDef.type === 'String'\n            ? 'Symbol'\n            : `${typeDef.type}(${getDisplayValue(typeDef, value)})`,\n        value: {\n          ...typeDef,\n          value,\n        } as RelTypedValue,\n      };\n    } else {\n      const value = unflattenContantValue(\n        typeDef,\n        type.constantType.value.arguments,\n      );\n\n      return {\n        type: 'Constant',\n        name: `${typeDef.type}(${getDisplayValue(typeDef, value)})`,\n        value: {\n          ...typeDef,\n          value: convertValue(typeDef, value),\n        } as RelTypedValue,\n      };\n    }\n  }\n\n  if (type.tag === Kind.PRIMITIVE_TYPE) {\n    switch (type.primitiveType) {\n      case PrimitiveType.SYMBOL:\n      case PrimitiveType.STRING:\n        return {\n          type: 'String',\n        };\n      case PrimitiveType.CHAR:\n        return {\n          type: 'Char',\n        };\n      case PrimitiveType.BOOL:\n        return {\n          type: 'Bool',\n        };\n      case PrimitiveType.INT_8:\n        return {\n          type: 'Int8',\n        };\n      case PrimitiveType.INT_16:\n        return {\n          type: 'Int16',\n        };\n      case PrimitiveType.INT_32:\n        return {\n          type: 'Int32',\n        };\n      case PrimitiveType.INT_64:\n        return {\n          type: 'Int64',\n        };\n      case PrimitiveType.INT_128:\n        return {\n          type: 'Int128',\n        };\n      case PrimitiveType.UINT_8:\n        return {\n          type: 'UInt8',\n        };\n      case PrimitiveType.UINT_16:\n        return {\n          type: 'UInt16',\n        };\n      case PrimitiveType.UINT_32:\n        return {\n          type: 'UInt32',\n        };\n      case PrimitiveType.UINT_64:\n        return {\n          type: 'UInt64',\n        };\n      case PrimitiveType.UINT_128:\n        return {\n          type: 'UInt128',\n        };\n      case PrimitiveType.FLOAT_16:\n        return {\n          type: 'Float16',\n        };\n      case PrimitiveType.FLOAT_32:\n        return {\n          type: 'Float32',\n        };\n      case PrimitiveType.FLOAT_64:\n        return {\n          type: 'Float64',\n        };\n      // TODO should we throw an error here?\n    }\n  }\n\n  if (type.tag === Kind.VALUE_TYPE && type.valueType) {\n    const typeDef = {\n      type: 'ValueType',\n      // TODO add name?\n      typeDefs: type.valueType.argumentTypes.map(t =>\n        getTypeDefFromProtobuf(t),\n      ),\n    } as const;\n\n    return mapValueType(typeDef);\n  }\n\n  // TODO should we keep it or just throw an error?\n  return {\n    type: 'Unknown',\n  };\n}\n\nexport function convertValue<T extends RelTypedValue>(\n  typeDef: RelTypeDef,\n  value: any,\n): T['value'] {\n  switch (typeDef.type) {\n    case 'String':\n    case 'Bool':\n      return value;\n    case 'Char':\n      return String.fromCodePoint(value);\n    case 'DateTime':\n      return new Date(Number(value) - UNIXEPOCH);\n    case 'Date':\n      return new Date(Number(value) * MILLISECONDS_PER_DAY - UNIXEPOCH);\n    case 'Year':\n    case 'Month':\n    case 'Week':\n    case 'Day':\n    case 'Hour':\n    case 'Minute':\n    case 'Second':\n    case 'Millisecond':\n    case 'Microsecond':\n    case 'Nanosecond':\n      return value;\n    case 'Missing':\n      return null;\n    case 'FilePos':\n      return value;\n    case 'Hash':\n      return uint128ToBigInt(Array.from(value));\n    case 'Int8':\n    case 'Int16':\n    case 'Int32':\n    case 'Int64':\n      return value;\n    case 'Int128':\n      return int128ToBigInt(Array.from(value));\n    case 'UInt8':\n    case 'UInt16':\n    case 'UInt32':\n    case 'UInt64':\n      return value;\n    case 'UInt128':\n      return uint128ToBigInt(Array.from(value));\n    case 'Float16':\n    case 'Float32':\n    case 'Float64':\n      return value;\n    case 'Decimal16':\n    case 'Decimal32':\n    case 'Decimal64':\n      return new Decimal(value.toString()).dividedBy(\n        Math.pow(10, typeDef.places),\n      );\n    case 'Decimal128': {\n      const val = int128ToBigInt(Array.from(value));\n\n      return new Decimal(val.toString()).dividedBy(\n        Math.pow(10, typeDef.places),\n      );\n    }\n    case 'Rational8':\n    case 'Rational16':\n    case 'Rational32':\n    case 'Rational64': {\n      value = Array.from(value);\n\n      return {\n        numerator: value[0],\n        denominator: value[1],\n      };\n    }\n    case 'Rational128': {\n      value = Array.from(value);\n\n      return {\n        numerator: int128ToBigInt(Array.from(value[0])),\n        denominator: int128ToBigInt(Array.from(value[1])),\n      };\n    }\n    case 'Constant': {\n      return typeDef.value.value;\n    }\n    case 'ValueType': {\n      const nonConstantTypeDefs = typeDef.typeDefs.filter(\n        td => td.type !== 'Constant',\n      );\n      let val = value?.toArray ? value.toArray() : value;\n\n      // TODO add explanation comment\n      // inlined value types? is that the proper term?\n      if (nonConstantTypeDefs.length === 1) {\n        val = [val];\n      }\n\n      return nonConstantTypeDefs.map((td, index) => {\n        return convertValue(td, val[index]);\n      });\n    }\n    case 'Unknown':\n      return value && value.toJSON ? value.toJSON() : value;\n  }\n}\n\nexport function getDisplayValue(\n  typeDef: RelTypeDef,\n  value: RelTypedValue['value'],\n): string {\n  const val = {\n    ...typeDef,\n    value,\n  } as RelTypedValue;\n\n  if (typeDef.type === 'Constant') {\n    return getDisplayValue(typeDef.value, value);\n  }\n\n  switch (val.type) {\n    case 'String':\n      return JSON.stringify(val.value).slice(1, -1);\n    case 'Bool':\n      return val.value ? 'true' : 'false';\n    case 'Char':\n      return val.value;\n    case 'DateTime':\n      return val.value.toISOString();\n    case 'Date':\n      return val.value.toISOString().split('T')[0];\n    case 'Year':\n    case 'Month':\n    case 'Week':\n    case 'Day':\n    case 'Hour':\n    case 'Minute':\n    case 'Second':\n    case 'Millisecond':\n    case 'Microsecond':\n    case 'Nanosecond':\n    case 'Int8':\n    case 'Int16':\n    case 'Int32':\n    case 'Int64':\n    case 'Int128':\n    case 'UInt8':\n    case 'UInt16':\n    case 'UInt32':\n    case 'UInt64':\n    case 'UInt128':\n    case 'FilePos':\n    case 'Hash':\n      return val.value.toString();\n    case 'Missing':\n      return 'missing';\n    case 'Float16':\n    case 'Float32':\n    case 'Float64':\n      return val.value % 1 === 0 ? val.value + '.0' : val.value.toString();\n    case 'Decimal16':\n    case 'Decimal32':\n    case 'Decimal64':\n    case 'Decimal128':\n      return val.value.toFixed(val.places);\n    case 'Rational8':\n    case 'Rational16':\n    case 'Rational32':\n    case 'Rational64':\n    case 'Rational128':\n      return `${val.value.numerator}/${val.value.denominator}`;\n    case 'ValueType': {\n      const nonConstantTypeDefs = val.typeDefs.filter(\n        td => td.type !== 'Constant',\n      );\n\n      return nonConstantTypeDefs\n        .map((td, index) => {\n          const displayValue = getDisplayValue(td, val.value[index]);\n\n          return td.type === 'ValueType' ? `(${displayValue})` : displayValue;\n        })\n        .join(', ');\n    }\n    case 'Unknown': {\n      const _value = val.value as any;\n\n      if (typeof _value === 'object') {\n        return Object.keys(_value)\n          .map(key => `${_value[key]}`)\n          .join(', ');\n      }\n\n      // probably inlined value type\n      return _value;\n    }\n  }\n}\n\nfunction int128ToBigInt(tuple: bigint[]) {\n  return (BigInt.asIntN(64, tuple[1]) << BigInt(64)) | tuple[0];\n}\n\nfunction uint128ToBigInt(tuple: bigint[]) {\n  return (BigInt.asUintN(64, tuple[1]) << BigInt(64)) | tuple[0];\n}\n\nfunction mapPrimitiveValue(val: PrimitiveValue) {\n  switch (val.value.oneofKind) {\n    case 'stringVal':\n      return `:${new TextDecoder().decode(val.value.stringVal)}`;\n    case 'charVal':\n      return val.value.charVal;\n    case 'boolVal':\n      return val.value.boolVal;\n    case 'int8Val':\n      return val.value.int8Val;\n    case 'int16Val':\n      return val.value.int16Val;\n    case 'int32Val':\n      return val.value.int32Val;\n    case 'int64Val':\n      return val.value.int64Val;\n    case 'int128Val':\n      return [val.value.int128Val.lowbits, val.value.int128Val.highbits];\n    case 'uint8Val':\n      return val.value.uint8Val;\n    case 'uint16Val':\n      return val.value.uint16Val;\n    case 'uint32Val':\n      return val.value.uint32Val;\n    case 'uint64Val':\n      return val.value.uint64Val;\n    case 'uint128Val':\n      return [val.value.uint128Val.lowbits, val.value.uint128Val.highbits];\n    case 'float16Val':\n      return val.value.float16Val;\n    case 'float32Val':\n      return val.value.float32Val;\n    case 'float64Val':\n      return val.value.float64Val;\n  }\n\n  throw new Error('Unknown primitive value');\n}\n\nfunction mapValueType(typeDef: Omit<ValueTypeValue, 'value'>): RelTypeDef {\n  const relNames = typeDef.typeDefs\n    .slice(0, 3)\n    .filter(\n      td => td.type === 'Constant' && td.value.type === 'String',\n    ) as ConstantValue[];\n\n  if (\n    relNames.length !== 3 ||\n    !(relNames[0].value.value === ':rel' && relNames[1].value.value === ':base')\n  ) {\n    return typeDef;\n  }\n\n  const standardValueType = (relNames[2].value.value as string).slice(1);\n\n  switch (standardValueType) {\n    case 'DateTime':\n    case 'Date':\n    case 'Year':\n    case 'Month':\n    case 'Week':\n    case 'Day':\n    case 'Hour':\n    case 'Minute':\n    case 'Second':\n    case 'Millisecond':\n    case 'Microsecond':\n    case 'Nanosecond':\n    case 'FilePos':\n    case 'Missing':\n    case 'Hash':\n      return {\n        type: standardValueType,\n      };\n    case 'FixedDecimal': {\n      if (\n        typeDef.typeDefs.length === 6 &&\n        typeDef.typeDefs[3].type === 'Constant' &&\n        typeDef.typeDefs[4].type === 'Constant'\n      ) {\n        const bits = Number(typeDef.typeDefs[3].value.value);\n        const places = Number(typeDef.typeDefs[4].value.value);\n\n        if (bits === 16 || bits === 32 || bits === 64 || bits === 128) {\n          return {\n            type: `Decimal${bits}`,\n            places: places,\n          };\n        }\n      }\n      break;\n    }\n    case 'Rational': {\n      if (\n        typeDef.typeDefs.length === 4 &&\n        typeDef.typeDefs[3].type === 'ValueType'\n      ) {\n        const tp = typeDef.typeDefs[3];\n\n        if (tp.typeDefs.length === 2) {\n          switch (tp.typeDefs[0].type) {\n            case 'Int8':\n              return { type: 'Rational8' };\n            case 'Int16':\n              return { type: 'Rational16' };\n            case 'Int32':\n              return { type: 'Rational32' };\n            case 'Int64':\n              return { type: 'Rational64' };\n            case 'Int128':\n              return { type: 'Rational128' };\n          }\n        }\n      }\n    }\n  }\n\n  return typeDef;\n}\n\ntype PValue = ReturnType<typeof mapPrimitiveValue>;\ntype NestedPrimitiveValue = PValue | NestedPrimitiveValue[];\n\nexport function unflattenContantValue(\n  typeDef: RelTypeDef,\n  value: PrimitiveValue[],\n) {\n  const values = value.map(mapPrimitiveValue);\n  const res: NestedPrimitiveValue[] = [];\n\n  const walk = (typeDef: RelTypeDef, result: any[]) => {\n    if (typeDef.type === 'ValueType') {\n      const r: any[] = [];\n      result.push(r);\n\n      typeDef.typeDefs.forEach(td => walk(td, r));\n    } else if (typeDef.type !== 'Constant') {\n      result.push(values.splice(0, 1)[0]);\n    }\n  };\n\n  walk(typeDef, res);\n\n  return res[0];\n}\n","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\nimport { StructRowProxy, Table } from 'apache-arrow';\nimport { Table as PrintTable } from 'console-table-printer';\n\nimport { ArrowRelation } from '../api/transaction/types';\nimport { Kind, PrimitiveType, RelType } from '../proto/generated/schema';\nimport {\n  convertValue,\n  getDisplayValue,\n  getTypeDef,\n  getTypeDefFromProtobuf,\n} from './resultUtils';\nimport { RelTypeDef, RelTypedValue } from './types';\n\nexport interface ResultColumn {\n  /**\n   * Returns type definition of the column\n   *\n   * @returns Type definition.\n   */\n  typeDef: RelTypeDef;\n\n  /**\n   * Returns an iterator over column values.\n   *\n   * @returns An iterator over column values.\n   */\n  [Symbol.iterator](): IterableIterator<RelTypedValue['value']>;\n\n  /**\n   * Returns column values as an array\n   *\n   * @returns An array of column values.\n   */\n  values: () => RelTypedValue['value'][];\n\n  /**\n   * Return a value at the given index.\n   *\n   * @param {string} index Row index.\n   * @returns Value or undefined if the index is out of range.\n   */\n  get: (index: number) => RelTypedValue['value'] | undefined;\n\n  /**\n   * Number of values in the column.\n   *\n   * @returns Number of values.\n   */\n  readonly length: number;\n}\n\ninterface IteratorOf<T> {\n  [Symbol.iterator](): IterableIterator<T>;\n  values: () => T[];\n  readonly length: number;\n}\n\ntype ColumnDef = {\n  typeDef: RelTypeDef;\n  metadata: RelType;\n  arrowIndex?: number;\n};\n\n/**\n * ResultTable provides an interface over {@link ArrowRelation} that maps Rel\n * types to their corresponding JavaScript equivalents.\n */\nexport class ResultTable implements IteratorOf<RelTypedValue['value'][]> {\n  private table: Table;\n  private colDefs: ColumnDef[];\n\n  /**\n   * Instantiate a new ResultTable instance.\n   *\n   * @example\n   *   cosnt result = await client.exec('database', 'engine', 'def output = 123, \"test\"')\n   *   cosnt table = new ResultTable(result.results[0]);\n   *\n   *   console.log(table.values()); // Prints [[123n, \"test\"]];\n   *\n   * @param relation Arrow relation\n   */\n  constructor(private relation: ArrowRelation) {\n    this.table = relation.table;\n\n    const isProtoMetadataAvailable = !!relation.metadata.arguments.filter(\n      t => t.tag !== Kind.UNSPECIFIED_KIND,\n    ).length;\n    const types = !isProtoMetadataAvailable\n      ? relation.relationId.split('/').filter(x => x)\n      : relation.metadata.arguments;\n\n    let arrowIndex = 0;\n\n    this.colDefs = types.map(t => {\n      const typeDef =\n        typeof t === 'string' ? getTypeDef(t) : getTypeDefFromProtobuf(t);\n\n      const colDef: ColumnDef = {\n        typeDef,\n        metadata:\n          typeof t === 'object'\n            ? t\n            : // TODO get rid of it when removing JSON metadata based implementation\n              {\n                tag: Kind.UNSPECIFIED_KIND,\n                primitiveType: PrimitiveType.UNSPECIFIED_TYPE,\n              },\n      };\n\n      if (typeDef.type !== 'Constant') {\n        colDef.arrowIndex = arrowIndex;\n        arrowIndex++;\n      }\n\n      return colDef;\n    });\n  }\n\n  /**\n   * Return an array of type definitions per column. Shortcut for column.typeDef.\n   *\n   * @returns An array of type definitions.\n   */\n  typeDefs() {\n    return this.colDefs.map(c => c.typeDef);\n  }\n\n  /**\n   * The number of columns in this table.\n   *\n   * @returns The number of columns.\n   */\n  get columnLength() {\n    return this.colDefs.length;\n  }\n\n  /**\n   * Return an array of columns.\n   *\n   * @returns An array of columns.\n   */\n  columns() {\n    const columns = [];\n\n    for (let i = 0; i < this.columnLength; i++) {\n      columns.push(this.columnAt(i));\n    }\n\n    return columns;\n  }\n\n  /**\n   * Return column at the given index.\n   *\n   * @param index The column index.\n   * @returns The column, or undefined if the index is out of range.\n   */\n  columnAt(index: number) {\n    const colDef = this.colDefs[index];\n\n    if (!colDef) {\n      throw new Error(`Couldn't find column by index`);\n    }\n    const table = this.table;\n    const length = isFullySpecialized(this.colDefs) ? 1 : this.table.numRows;\n\n    const column: ResultColumn = {\n      get length() {\n        return length;\n      },\n      get typeDef() {\n        return colDef.typeDef;\n      },\n      *[Symbol.iterator]() {\n        if (colDef.typeDef.type === 'Constant') {\n          for (let i = 0; i < length; i++) {\n            yield convertValue(colDef.typeDef, null);\n          }\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const arrowColumn = table.getChildAt(colDef.arrowIndex!);\n\n          if (!arrowColumn) {\n            throw new Error(`Couldn't find column by index`);\n          }\n\n          for (const val of arrowColumn) {\n            yield convertValue(colDef.typeDef, val);\n          }\n        }\n      },\n      values() {\n        return Array.from(this);\n      },\n      get(index: number) {\n        if (index < 0 || index >= length) {\n          return;\n        }\n\n        if (colDef.typeDef.type === 'Constant') {\n          return convertValue(colDef.typeDef, null);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const arrowColumn = table.getChildAt(colDef.arrowIndex!)!;\n\n          return convertValue(colDef.typeDef, arrowColumn.get(index));\n        }\n      },\n    };\n\n    return column;\n  }\n\n  /**\n   * Return a new table containing only specified columns.\n   *\n   * @param begin The beginning of the specified portion of the Table.\n   * @param end The end of the specified portion of the Table. This is\n   *   exclusive of the element at the index 'end'.\n   * @returns A new ResultTable.\n   */\n  sliceColumns(begin: number | undefined, end?: number | undefined) {\n    const newColDefs = this.colDefs.slice(begin, end);\n    const arrowColNames: any[] = [];\n\n    newColDefs.forEach(colDef => {\n      if (colDef.arrowIndex !== undefined) {\n        arrowColNames.push(this.table.schema.names[colDef.arrowIndex]);\n      }\n    });\n\n    const relationId = this.relation.relationId\n      .split('/')\n      .filter(t => t)\n      .slice(begin, end)\n      .join('/');\n    const slicedTable = this.table.select(arrowColNames);\n\n    return new ResultTable({\n      relationId: `/${relationId}`,\n      table: slicedTable,\n      metadata: { arguments: newColDefs.map(cd => cd.metadata) },\n    });\n  }\n\n  /**\n   * The number of rows in this table.\n   *\n   * @returns The number of rows.\n   */\n  get length() {\n    if (isFullySpecialized(this.colDefs)) {\n      return 1;\n    }\n\n    return this.table.numRows;\n  }\n\n  /**\n   * Return an iterator over rows.\n   *\n   * @returns An iterator over rows\n   */\n  *[Symbol.iterator]() {\n    if (isFullySpecialized(this.colDefs)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield this.get(0)!;\n    }\n\n    for (const arrowRow of this.table) {\n      yield arrowRowToValues(arrowRow, this.colDefs);\n    }\n  }\n\n  /**\n   * Return an array of rows.\n   *\n   * @returns An array of rows.\n   */\n  values() {\n    return Array.from(this);\n  }\n\n  /**\n   * Return row at the given index.\n   *\n   * @param {string} index Row index.\n   * @returns The row or undefined if the index is out of range.\n   */\n  get(index: number) {\n    if (isFullySpecialized(this.colDefs) && index === 0) {\n      return this.colDefs.map(c => {\n        return convertValue(c.typeDef, null);\n      });\n    }\n\n    const arrowRow = this.table.get(index);\n\n    if (arrowRow) {\n      return arrowRowToValues(arrowRow, this.colDefs);\n    }\n  }\n\n  /**\n   * Return a new table that's a sub-section of this table.\n   *\n   * @param begin The beginning of the specified portion of the Table.\n   * @param end The end of the specified portion of the Table. This is\n   *   exclusive of the element at the index 'end'.\n   * @returns A new ResultTable.\n   */\n  slice(begin: number | undefined, end?: number | undefined) {\n    const slicedTable = this.table.slice(begin, end);\n\n    return new ResultTable({\n      relationId: this.relation.relationId,\n      table: slicedTable,\n      metadata: this.relation.metadata,\n    });\n  }\n\n  /**\n   * Prints this table using console.log.\n   *\n   * Note: it uses getDisplayValue function to convert values to strings.\n   */\n  print() {\n    const pTable = new PrintTable({\n      columns: this.colDefs.map((colDef, i) => ({\n        name: i.toString(),\n        title: colDef.typeDef.name || colDef.typeDef.type,\n      })),\n    });\n\n    this.values().forEach(row => {\n      const printRow: Record<number, string> = {};\n\n      row.forEach((val, index) => {\n        const { typeDef } = this.colDefs[index];\n        printRow[index] = getDisplayValue(typeDef, val);\n      });\n\n      pTable.addRow(printRow);\n    });\n\n    pTable.printTable();\n  }\n\n  /**\n   * Return a new table containing only physical columns. Specialized columns\n   * are not included.\n   *\n   * @returns A new ResultTable.\n   */\n  physical() {\n    const relationId = this.relation.relationId\n      .split('/')\n      .filter(t => t.length && getTypeDef(t).type !== 'Constant')\n      .join('/');\n\n    return new ResultTable({\n      relationId: `/${relationId}`,\n      table: this.table,\n      metadata: {\n        arguments: this.colDefs\n          .filter(cd => cd.typeDef.type !== 'Constant')\n          .map(cd => cd.metadata),\n      },\n    });\n  }\n\n  /**\n   * Return Arrow Table that's being used internally\n   *\n   * @returns Arrow Table\n   */\n  arrow() {\n    return this.table;\n  }\n}\n\nfunction arrowRowToValues(arrowRow: StructRowProxy, colDefs: ColumnDef[]) {\n  const arr = arrowRow.toArray();\n  const row = colDefs.map(colDef => {\n    if (colDef.typeDef.type === 'Constant') {\n      return convertValue(colDef.typeDef, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return convertValue(colDef.typeDef, arr[colDef.arrowIndex!]);\n    }\n  });\n\n  return row;\n}\n\nfunction isFullySpecialized(colDefs: ColumnDef[]) {\n  return colDefs.length && colDefs.every(c => c.typeDef.type === 'Constant');\n}\n","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"ConfigIniParser\"]: () => __WEBPACK_EXTERNAL_MODULE_config_ini_parser_fd25630f__.ConfigIniParser });","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"os\");","/**\n * Copyright 2021 RelationalAI, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-env node */\n/* eslint-disable no-console */\n\nimport { ConfigIniParser } from 'config-ini-parser';\nimport { promises } from 'fs';\nimport { homedir } from 'os';\n\nimport { ClientCredentials } from './credentials';\nimport { AccessTokenCache, Config } from './types';\n\nconst { readFile, writeFile } = promises;\n\nexport async function readConfig(\n  profile = 'default',\n  configPath = '~/.rai/config',\n) {\n  configPath = resolveHome(configPath);\n\n  try {\n    const strCfg = await readFile(configPath, 'utf-8');\n    const configParser = new ConfigIniParser();\n\n    configParser.parse(strCfg);\n\n    if (!configParser.isHaveSection(profile)) {\n      throw new Error(`Profile '${profile}' not found in ${configPath}`);\n    }\n\n    return readClientCredentials(configParser, profile);\n  } catch (error: unknown) {\n    if (isNodeError(error) && error.code === 'ENOENT') {\n      throw new Error(`Can't find file: ${configPath}`);\n    } else {\n      throw error;\n    }\n  }\n}\n\nconst REQUIRED_FIELDS = ['host', 'client_id', 'client_secret'];\nconst DEFAULT_PORT = '443';\nconst DEFAULT_SCHEME = 'https';\nconst DEFAULT_CLIENT_CREDENTIALS_URL =\n  'https://login.relationalai.com/oauth/token';\n\nfunction readClientCredentials(configParser: ConfigIniParser, profile: string) {\n  for (const field of REQUIRED_FIELDS) {\n    if (!configParser.get(profile, field, '')) {\n      throw new Error(`Can't find ${field} field in ${profile} profile`);\n    }\n  }\n\n  const config: Config = {\n    host: configParser.get(profile, 'host', ''),\n    port: configParser.get(profile, 'port', DEFAULT_PORT),\n    scheme: configParser.get(profile, 'scheme', DEFAULT_SCHEME),\n    credentials: new ClientCredentials(\n      configParser.get(profile, 'client_id', ''),\n      configParser.get(profile, 'client_secret', ''),\n      configParser.get(\n        profile,\n        'client_credentials_url',\n        DEFAULT_CLIENT_CREDENTIALS_URL,\n      ),\n      async () => await readTokenCache(profile),\n      async cache => await writeTokenCache(cache, profile),\n    ),\n  };\n\n  return config;\n}\n\nfunction isNodeError(error: unknown): error is NodeJS.ErrnoException {\n  return error instanceof Error;\n}\n\nfunction resolveHome(path: string) {\n  if (path.startsWith('~/')) {\n    return `${homedir()}/${path.slice(2)}`;\n  }\n\n  return path;\n}\n\nfunction makeTokenCachePath(profile: string) {\n  return resolveHome(`~/.rai/${profile}_cache.json`);\n}\n\nasync function readTokenCache(profile = 'default') {\n  const cachePath = makeTokenCachePath(profile);\n\n  try {\n    const cachedStr = await readFile(cachePath, 'utf-8');\n    const cache = JSON.parse(cachedStr);\n\n    if (cache.access_token && cache.created_on && cache.expires_in) {\n      return cache as AccessTokenCache;\n    }\n    // eslint-disable-next-line no-empty\n  } catch {}\n}\n\nasync function writeTokenCache(token: AccessTokenCache, profile = 'default') {\n  const cachePath = makeTokenCachePath(profile);\n  const cacheStr = JSON.stringify(token, null, 2);\n\n  await writeFile(cachePath, cacheStr, 'utf-8');\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE_node_fetch_e2fb16d6__","x","d","__WEBPACK_EXTERNAL_MODULE_query_string_2dcf3be8__","stringify","ApiError","Error","message","status","details","response","constructor","super","this","name","toString","TransactionError","result","msg","JSON","undefined","VERSION","isNode","process","versions","node","addDefaultHeaders","headers","url","sdkUserAgent","defaultHeaders","Accept","parsedUrl","URL","hostname","async","request","options","opts","method","body","window","highWaterMark","fullUrl","query","keys","length","arrayFormat","fetch","globalThis","error","errorMsg","toLowerCase","includes","contentType","responseBody","responseClone","clone","json","blob","formData","files","entry","push","file","parseMultipart","text","err","cause","onResponse","ok","type","statusText","makeError","Base","config","region","baseUrl","_onResponse","scheme","host","port","replace","path","token","credentials","getToken","authorization","__WEBPACK_EXTERNAL_MODULE_apache_arrow_c15a7582__","tableFromIPC","__WEBPACK_EXTERNAL_MODULE__protobuf_ts_runtime_2675ee4c__","MESSAGE_TYPE","MessageType","UnknownFieldHandler","WireType","reflectionMergePartial","PrimitiveType","Kind","RelationId$Type","no","kind","repeat","T","RelType","create","value","arguments","internalBinaryRead","reader","target","end","pos","fieldNo","wireType","tag","uint32","u","readUnknownField","typeName","skip","internalBinaryWrite","writer","i","fork","join","writeUnknownFields","RelationId","RelTuple$Type","PrimitiveValue","RelTuple","RelInt128$Type","L","highbits","lowbits","uint64","toBigInt","RelInt128","RelUInt128$Type","RelUInt128","PrimitiveValue$Type","oneof","oneofKind","int32","int128Val","int64Val","int64","int32Val","int16Val","int8Val","uint128Val","uint64Val","uint32Val","uint16Val","uint8Val","float64Val","double","float32Val","float","float16Val","charVal","boolVal","bool","stringVal","bytes","ValueType$Type","argumentTypes","ValueType","ConstantType$Type","relType","ConstantType","RelType$Type","primitiveType","valueType","constantType","MetadataInfo$Type","RelationMetadata","relations","MetadataInfo","RelationMetadata$Type","fileName","relationId","string","TransactionMode","TransactionAsyncState","EngineSize","EngineState","readArrowFiles","results","table","stream","filename","makeArrowRelations","metadata","metadataMap","reduce","memo","item","map","r","readProtoMetadata","arrayBuffer","buffer","data","Uint8Array","fromBinary","readJson","str","TextDecoder","decode","parse","TransactionApi","database","engine","transaction","mode","OPEN","dbname","compute_name","open_mode","post","actions","readonly","labeledActions","action","makeLabeledAction","abort","nowait_durable","version","computeName","runTransaction","TransactionAsyncApi","Array","isArray","find","problems","metadataProto","readTransactionResult","transactions","transactionId","makeModel","makeQueryInput","rel_key","values","columns","toRelLiteral","UserStatus","UserRole","derivedCtor","Client","cloneDatabase","put","source_name","databases","listDatabases","delete","runActions","rels","delete_edb","delete_edb_result","size","XS","compute","computes","listEngines","models","sources","listModels","model","m","delete_source","permissions","client","clients","clientId","patch","queryString","inputs","tags","v1_inputs","input","engine_name","runTransactionAsync","interval","timeout","Number","POSITIVE_INFINITY","execAsync","txnId","id","pollTransaction","startedAt","Date","now","Promise","resolve","reject","checkState","setTimeout","state","getTransaction","ABORTED","COMPLETED","all","getTransactionMetadata","getTransactionProblems","getTransactionResults","outputs","persist","source","makeQueryAction","relation","qs","csv","syntax","schema","forEach","k","headerStr","header","syntaxToRel","colName","schemaToRel","email","roles","user","users","userId","updateUser","ACTIVE","INACTIVE","baseCtor","getOwnPropertyNames","getOwnPropertyDescriptor","DatabaseState","Permission","Credentials","GetTokenCredentials","AccessToken","experiesIn","createdOn","isExpired","ClientCredentials","readCache","writeCache","clientSecret","clientCredentialsUrl","accessToken","requestedUrl","readTokenFromCache","requestToken","cache","access_token","expires_in","created_on","client_id","client_secret","grant_type","audience","__WEBPACK_EXTERNAL_MODULE_console_table_printer_00653786__","Table","__WEBPACK_EXTERNAL_MODULE_decimal_js_e057b0bb__","precision","intRegEx","uintRegEx","floatRegEx","decimalRegEx","rationalRegEx","getTypeDef","startsWith","intMatch","match","uintMatch","floatMatch","decimalMatch","parseInt","places","rationalMatch","getTypeDefFromProtobuf","CONSTANT_TYPE","typeDef","mapPrimitiveValue","convertValue","getDisplayValue","unflattenContantValue","PRIMITIVE_TYPE","SYMBOL","STRING","CHAR","BOOL","INT_8","INT_16","INT_32","INT_64","INT_128","UINT_8","UINT_16","UINT_32","UINT_64","UINT_128","FLOAT_16","FLOAT_32","FLOAT_64","VALUE_TYPE","relNames","typeDefs","slice","filter","td","standardValueType","bits","tp","mapValueType","t","String","fromCodePoint","tuple","from","BigInt","asUintN","int128ToBigInt","dividedBy","Math","pow","val","numerator","denominator","nonConstantTypeDefs","toArray","index","toJSON","toISOString","split","toFixed","displayValue","_value","asIntN","res","walk","splice","ResultTable","colDefs","types","UNSPECIFIED_KIND","arrowIndex","colDef","UNSPECIFIED_TYPE","c","columnLength","columnAt","isFullySpecialized","numRows","column","Symbol","iterator","arrowColumn","getChildAt","sliceColumns","begin","newColDefs","arrowColNames","names","slicedTable","select","cd","arrowRow","arrowRowToValues","print","pTable","title","row","printRow","addRow","printTable","physical","arrow","arr","every","__WEBPACK_EXTERNAL_MODULE_config_ini_parser_fd25630f__","ConfigIniParser","__WEBPACK_EXTERNAL_createRequire","import","meta","readFile","writeFile","promises","readConfig","profile","configPath","resolveHome","strCfg","configParser","isHaveSection","field","REQUIRED_FIELDS","cachePath","makeTokenCachePath","cachedStr","readTokenCache","cacheStr","writeTokenCache","readClientCredentials","isNodeError","code","homedir"],"sourceRoot":""}