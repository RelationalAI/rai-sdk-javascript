// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "message.proto" (package "relationalai.protocol", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RelationId } from "./schema";
/**
 * Describes metadata of a set of relations.
 *
 * @generated from protobuf message relationalai.protocol.MetadataInfo
 */
export interface MetadataInfo {
    /**
     * @generated from protobuf field: repeated relationalai.protocol.RelationMetadata relations = 1;
     */
    relations: RelationMetadata[];
}
/**
 * Describes metadata of a single relation.
 *
 * @generated from protobuf message relationalai.protocol.RelationMetadata
 */
export interface RelationMetadata {
    /**
     * Type signature of this relation.
     *
     * @generated from protobuf field: relationalai.protocol.RelationId relation_id = 1;
     */
    relationId?: RelationId;
    /**
     * Identifier for the corresponding data file.
     *
     * @generated from protobuf field: string file_name = 2;
     */
    fileName: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class MetadataInfo$Type extends MessageType<MetadataInfo> {
    constructor() {
        super("relationalai.protocol.MetadataInfo", [
            { no: 1, name: "relations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelationMetadata }
        ]);
    }
    create(value?: PartialMessage<MetadataInfo>): MetadataInfo {
        const message = { relations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetadataInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataInfo): MetadataInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated relationalai.protocol.RelationMetadata relations */ 1:
                    message.relations.push(RelationMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated relationalai.protocol.RelationMetadata relations = 1; */
        for (let i = 0; i < message.relations.length; i++)
            RelationMetadata.internalBinaryWrite(message.relations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message relationalai.protocol.MetadataInfo
 */
export const MetadataInfo = new MetadataInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelationMetadata$Type extends MessageType<RelationMetadata> {
    constructor() {
        super("relationalai.protocol.RelationMetadata", [
            { no: 1, name: "relation_id", kind: "message", T: () => RelationId },
            { no: 2, name: "file_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RelationMetadata>): RelationMetadata {
        const message = { fileName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RelationMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RelationMetadata): RelationMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* relationalai.protocol.RelationId relation_id */ 1:
                    message.relationId = RelationId.internalBinaryRead(reader, reader.uint32(), options, message.relationId);
                    break;
                case /* string file_name */ 2:
                    message.fileName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RelationMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* relationalai.protocol.RelationId relation_id = 1; */
        if (message.relationId)
            RelationId.internalBinaryWrite(message.relationId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string file_name = 2; */
        if (message.fileName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message relationalai.protocol.RelationMetadata
 */
export const RelationMetadata = new RelationMetadata$Type();
